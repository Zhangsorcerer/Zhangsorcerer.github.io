(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/about/about.component.html":
/*!********************************************!*\
  !*** ./src/app/about/about.component.html ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"ui list\" *ngIf=\"!about\" style=\"text-align:center; margin-top: 100px; margin-bottom: 50px;\" >\n  <a class=\"item\" (click)=\"aboutFunc()\">About</a>\n</div>\n\n<div *ngIf=\"about\" style=\"margin: 30px; text-align: center;\" class=\"ui message\">\n  <i class=\"close icon\" (click)=\"hideAbout()\"></i>\n  <h4>This project was designed and developed by Michaela Rodenb√ºcher.</h4>\n  <p>Master-Thesis at Otto-Friedrich University Bamberg.\n    <br>May 2019\n  </p>\n</div>"

/***/ }),

/***/ "./src/app/about/about.component.ts":
/*!******************************************!*\
  !*** ./src/app/about/about.component.ts ***!
  \******************************************/
/*! exports provided: AboutComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AboutComponent", function() { return AboutComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var AboutComponent = /** @class */ (function () {
    function AboutComponent() {
        this.about = false;
    }
    AboutComponent.prototype.ngOnInit = function () {
    };
    AboutComponent.prototype.aboutFunc = function () {
        this.about = true;
        return this.about;
    };
    AboutComponent.prototype.hideAbout = function () {
        this.about = false;
        return this.about;
    };
    AboutComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-about',
            template: __webpack_require__(/*! ./about.component.html */ "./src/app/about/about.component.html")
        }),
        __metadata("design:paramtypes", [])
    ], AboutComponent);
    return AboutComponent;
}());



/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _home_home_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./home/home.component */ "./src/app/home/home.component.ts");
/* harmony import */ var _environment_environment_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment/environment.component */ "./src/app/environment/environment.component.ts");
/* harmony import */ var _first_app_first_app_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./first-app/first-app.component */ "./src/app/first-app/first-app.component.ts");
/* harmony import */ var _typescript_typescript_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typescript/typescript.component */ "./src/app/typescript/typescript.component.ts");
/* harmony import */ var _project_overview_project_overview_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./project-overview/project-overview.component */ "./src/app/project-overview/project-overview.component.ts");
/* harmony import */ var _application_application_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./application/application.component */ "./src/app/application/application.component.ts");
/* harmony import */ var _components_components_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/components.component */ "./src/app/components/components.component.ts");
/* harmony import */ var _components_formmodules_directives_components_formmodules_directives_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components-formmodules-directives/components-formmodules-directives.component */ "./src/app/components-formmodules-directives/components-formmodules-directives.component.ts");
/* harmony import */ var _reusable_components_reusable_components_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./reusable-components/reusable-components.component */ "./src/app/reusable-components/reusable-components.component.ts");
/* harmony import */ var _services_services_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/services.component */ "./src/app/services/services.component.ts");
/* harmony import */ var _routing_routing_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./routing/routing.component */ "./src/app/routing/routing.component.ts");
/* harmony import */ var _http_http_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./http/http.component */ "./src/app/http/http.component.ts");
/* harmony import */ var _finish_app_finish_app_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./finish-app/finish-app.component */ "./src/app/finish-app/finish-app.component.ts");
/* harmony import */ var _about_about_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./about/about.component */ "./src/app/about/about.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
















var routes = [
    { path: '', redirectTo: '/home', pathMatch: 'full' },
    { path: 'home', component: _home_home_component__WEBPACK_IMPORTED_MODULE_2__["HomeComponent"] },
    { path: 'environment', component: _environment_environment_component__WEBPACK_IMPORTED_MODULE_3__["EnvironmentComponent"], runGuardsAndResolvers: 'always' },
    { path: 'first-app', component: _first_app_first_app_component__WEBPACK_IMPORTED_MODULE_4__["FirstAppComponent"] },
    { path: 'typescript', component: _typescript_typescript_component__WEBPACK_IMPORTED_MODULE_5__["TypescriptComponent"] },
    { path: 'project-overview', component: _project_overview_project_overview_component__WEBPACK_IMPORTED_MODULE_6__["ProjectOverviewComponent"] },
    { path: 'application', component: _application_application_component__WEBPACK_IMPORTED_MODULE_7__["ApplicationComponent"] },
    { path: 'components', component: _components_components_component__WEBPACK_IMPORTED_MODULE_8__["ComponentsComponent"] },
    { path: 'components-formmodules-directives', component: _components_formmodules_directives_components_formmodules_directives_component__WEBPACK_IMPORTED_MODULE_9__["ComponentsFormmodulesDirectivesComponent"] },
    { path: 'reusable-components', component: _reusable_components_reusable_components_component__WEBPACK_IMPORTED_MODULE_10__["ReusableComponentsComponent"] },
    { path: 'services', component: _services_services_component__WEBPACK_IMPORTED_MODULE_11__["ServicesComponent"] },
    { path: 'routing', component: _routing_routing_component__WEBPACK_IMPORTED_MODULE_12__["RoutingComponent"] },
    { path: 'http', component: _http_http_component__WEBPACK_IMPORTED_MODULE_13__["HttpComponent"] },
    { path: 'finish-app', component: _finish_app_finish_app_component__WEBPACK_IMPORTED_MODULE_14__["FinishAppComponent"] },
    { path: 'about', component: _about_about_component__WEBPACK_IMPORTED_MODULE_15__["AboutComponent"] }
];
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forRoot(routes, { onSameUrlNavigation: "reload" })],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]]
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());



/***/ }),

/***/ "./src/app/app.component.html":
/*!************************************!*\
  !*** ./src/app/app.component.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n  <h1 class=\"ui header\" style=\"text-align:center; margin-top: 30px; margin-bottom: 50px; margin-left: 20%; \">\r\n    {{ title }}\r\n  </h1>\r\n  <div class=\"ui grid container\" style=\"min-width:90%;\">\r\n    <div class=\"four wide column\">\r\n\r\n      <div class=\"ui left fixed vertical menu \" style=\"max-width:25%;\">\r\n        <a class=\"item\" routerLink=\"/home\" routerLinkActive=\"active\">\r\n          Home\r\n        </a>\r\n        <div class=\"item\">\r\n          <h4>General</h4>\r\n          <a class=\"item\" routerLink=\"/environment\" routerLinkActive=\"active\">\r\n            Environment\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/first-app\" routerLinkActive=\"active\">\r\n            First Angular-App\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/typescript\" routerLinkActive=\"active\">\r\n            TypeScript\r\n          </a>\r\n        </div>\r\n        <div class=\"item\">\r\n          <h4>Project</h4>\r\n          <a class=\"item\" routerLink=\"/project-overview\" routerLinkActive=\"active\">\r\n            Introduction\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/application\" routerLinkActive=\"active\">\r\n            App</a>\r\n          <a class=\"item\" routerLink=\"/components\" routerLinkActive=\"active\">\r\n            Components</a>\r\n          <a class=\"item\" routerLink=\"/components-formmodules-directives\" routerLinkActive=\"active\">\r\n            Components, FormModules, Directives\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/reusable-components\" routerLinkActive=\"active\">\r\n            Reusable Components\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/services\" routerLinkActive=\"active\">\r\n            Services\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/routing\" routerLinkActive=\"active\">\r\n            Routing\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/http\" routerLinkActive=\"active\">\r\n            HTTP\r\n          </a>\r\n          <a class=\"item\" routerLink=\"/finish-app\" routerLinkActive=\"active\">\r\n            Finish the App\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"twelve wide column\">\r\n      <router-outlet (activate)=\"onActivate()\"></router-outlet>\r\n      <div style=\"text-align:center; margin: 50px;\">\r\n        <button class=\"ui button primary\" [routerLink]=\"getLast()\" *ngIf=\"!getHideBackButton()\">Back</button>\r\n        <button class=\"ui button primary\" [routerLink]=\"getNext()\" *ngIf=\"!getHideNextButton()\">Next</button>\r\n      </div>\r\n      <app-about></app-about>\r\n    </div>\r\n  </div>\r\n\r\n</div>"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var AppComponent = /** @class */ (function () {
    function AppComponent(router, location) {
        this.router = router;
        this.location = location;
        this.title = 'Learn Angular!';
        this.hideBackButton = false;
        this.hideNextButton = false;
        this.routerLinks = ["/home", "/environment", "/first-app", "/typescript", "/project-overview",
            "/application", "/components", "/components-formmodules-directives", "/reusable-components",
            "/services", "/routing", "/http", "/finish-app"];
    }
    AppComponent.prototype.ngOnInit = function () { };
    AppComponent.prototype.onActivate = function () {
        window.scroll(0, 0);
    };
    AppComponent.prototype.getHideNextButton = function () {
        this.routerLink = this.router.url;
        if (this.routerLink === this.routerLinks[0] || this.routerLink === this.routerLinks[this.routerLinks.length - 1]) {
            this.hideNextButton = true;
        }
        else
            this.hideNextButton = false;
        return this.hideNextButton;
    };
    AppComponent.prototype.getHideBackButton = function () {
        this.routerLink = this.router.url;
        if (this.routerLink === this.routerLinks[0]) {
            this.hideBackButton = true;
        }
        else
            this.hideBackButton = false;
        return this.hideBackButton;
    };
    AppComponent.prototype.getNext = function () {
        this.routerLink = this.router.url;
        var counter = -1;
        for (var _i = 0, _a = this.routerLinks; _i < _a.length; _i++) {
            var r = _a[_i];
            counter++;
            if (this.routerLink === r) {
                this.routerLink = this.routerLinks[counter + 1];
                break;
            }
        }
        return this.routerLink;
    };
    AppComponent.prototype.getLast = function () {
        this.routerLink = this.router.url;
        var counter = -1;
        for (var _i = 0, _a = this.routerLinks; _i < _a.length; _i++) {
            var r = _a[_i];
            counter++;
            if (this.routerLink === r) {
                this.routerLink = this.routerLinks[counter - 1];
                break;
            }
        }
        return this.routerLink;
    };
    AppComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./app.component.html */ "./src/app/app.component.html")
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["Location"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _home_home_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./home/home.component */ "./src/app/home/home.component.ts");
/* harmony import */ var _environment_environment_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environment/environment.component */ "./src/app/environment/environment.component.ts");
/* harmony import */ var _first_app_first_app_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./first-app/first-app.component */ "./src/app/first-app/first-app.component.ts");
/* harmony import */ var _typescript_typescript_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./typescript/typescript.component */ "./src/app/typescript/typescript.component.ts");
/* harmony import */ var _project_overview_project_overview_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./project-overview/project-overview.component */ "./src/app/project-overview/project-overview.component.ts");
/* harmony import */ var _application_application_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./application/application.component */ "./src/app/application/application.component.ts");
/* harmony import */ var _components_components_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/components.component */ "./src/app/components/components.component.ts");
/* harmony import */ var _components_formmodules_directives_components_formmodules_directives_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components-formmodules-directives/components-formmodules-directives.component */ "./src/app/components-formmodules-directives/components-formmodules-directives.component.ts");
/* harmony import */ var _reusable_components_reusable_components_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./reusable-components/reusable-components.component */ "./src/app/reusable-components/reusable-components.component.ts");
/* harmony import */ var _services_services_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./services/services.component */ "./src/app/services/services.component.ts");
/* harmony import */ var _routing_routing_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./routing/routing.component */ "./src/app/routing/routing.component.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _http_http_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./http/http.component */ "./src/app/http/http.component.ts");
/* harmony import */ var _finish_app_finish_app_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./finish-app/finish-app.component */ "./src/app/finish-app/finish-app.component.ts");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/material/progress-bar */ "./node_modules/@angular/material/esm5/progress-bar.es5.js");
/* harmony import */ var _about_about_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./about/about.component */ "./src/app/about/about.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






















var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [
                _app_component__WEBPACK_IMPORTED_MODULE_3__["AppComponent"],
                _home_home_component__WEBPACK_IMPORTED_MODULE_4__["HomeComponent"],
                _environment_environment_component__WEBPACK_IMPORTED_MODULE_5__["EnvironmentComponent"],
                _first_app_first_app_component__WEBPACK_IMPORTED_MODULE_6__["FirstAppComponent"],
                _typescript_typescript_component__WEBPACK_IMPORTED_MODULE_7__["TypescriptComponent"],
                _project_overview_project_overview_component__WEBPACK_IMPORTED_MODULE_8__["ProjectOverviewComponent"],
                _application_application_component__WEBPACK_IMPORTED_MODULE_9__["ApplicationComponent"],
                _components_components_component__WEBPACK_IMPORTED_MODULE_10__["ComponentsComponent"],
                _components_formmodules_directives_components_formmodules_directives_component__WEBPACK_IMPORTED_MODULE_11__["ComponentsFormmodulesDirectivesComponent"],
                _reusable_components_reusable_components_component__WEBPACK_IMPORTED_MODULE_12__["ReusableComponentsComponent"],
                _services_services_component__WEBPACK_IMPORTED_MODULE_13__["ServicesComponent"],
                _routing_routing_component__WEBPACK_IMPORTED_MODULE_14__["RoutingComponent"],
                _http_http_component__WEBPACK_IMPORTED_MODULE_16__["HttpComponent"],
                _finish_app_finish_app_component__WEBPACK_IMPORTED_MODULE_17__["FinishAppComponent"],
                _about_about_component__WEBPACK_IMPORTED_MODULE_21__["AboutComponent"]
            ],
            imports: [
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"],
                _app_routing_module__WEBPACK_IMPORTED_MODULE_2__["AppRoutingModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_15__["FormsModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_19__["BrowserAnimationsModule"],
                _angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_20__["MatProgressBarModule"]
            ],
            providers: [
                { provide: _angular_common__WEBPACK_IMPORTED_MODULE_18__["APP_BASE_HREF"], useValue: '/' },
                { provide: _angular_common__WEBPACK_IMPORTED_MODULE_18__["LocationStrategy"], useClass: _angular_common__WEBPACK_IMPORTED_MODULE_18__["HashLocationStrategy"] }
            ],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_3__["AppComponent"]]
        })
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/application/application.component.html":
/*!********************************************************!*\
  !*** ./src/app/application/application.component.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>App</h2>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\r\n  <h5>User Story</h5>\r\n  <p>As a <b>user</b><br />\r\n    I want to <b>have an app shell</b>, <br />\r\n    to <b> display the app's content</b>.</p>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Initial Application</h4>\r\n  <p>Open your cmd and type:</p>\r\n  <p class=\"ui message black\"> <code style=\"font-family:'Consolas';\">ng new where-to-go -is</code></p>\r\n  <p>The <code style=\"font-family:'Consolas';\">-is</code> defines that the project has an inline-style. If you don't do\r\n    this, we would get an extra\r\n    CSS-file for every single component. We don't want that for this project.</p>\r\n  <p>Next open your Visual Studio Code (restart it if it was open during the other installations) and open the project folder (STRG+O). After that run the\r\n    initial application. You can open a terminal directly in Visual Studio Code with STRG+√ñ.</p>\r\n  <p class=\"ui message black\"> <code style=\"font-family:'Consolas';\">ng serve --open</code></p>\r\n  <p>When the brower is open you will see the initial app of Angular:</p>\r\n  <img class=\"ui image big centered border\" src=\"assets/img/Angular-Initial-App.png\">\r\n</div>\r\n\r\n<div *ngIf=\"theoryLarge\" class=\"ui message\" style=\"margin-top: 20px;\">\r\n  <h4>Structure of the project</h4>\r\n  <p>The CLI created a project for us. These are the workspace files:</p>\r\n  <p><code style=\"font-family:'Consolas';\">\r\n    where-to-go <br/>\r\n    |- e2e:</code> file for end-to-end tests<br /> <code style=\"font-family:'Consolas';\">\r\n    |&nbsp;&nbsp; |-- ... <br/>\r\n    |- node_modules:</code> installed npm-packages<br /><code style=\"font-family:'Consolas';\">\r\n    |&nbsp;&nbsp; |-- ... <br/>\r\n    |- <b>src:</b></code> <b>code of our application</b><br /><code style=\"font-family:'Consolas';\">\r\n    |&nbsp;&nbsp; |-- ... <br/>\r\n    |- .editorconfig:</code> configuration for the code editor<br /> <code style=\"font-family:'Consolas';\">\r\n    |- .gitignore:</code> files and folders ignored by Git<br /><code style=\"font-family:'Consolas';\">\r\n    |- angular.json:</code> configuration file of the angular CLI<br /><code style=\"font-family:'Consolas';\">\r\n    |- package-lock.json:</code> contains information about installed packages<br /><code style=\"font-family:'Consolas';\">\r\n    |- package.json:</code> npm-packages configuration and information<br /><code style=\"font-family:'Consolas';\">\r\n    |- README.md:</code> documents help<br /><code style=\"font-family:'Consolas';\">\r\n    |- tsconfig.json:</code> configuration file for TypeScript<br /><code style=\"font-family:'Consolas';\">\r\n    |- tslint.json:</code> TSLint configuration file<br /><code style=\"font-family:'Consolas';\">\r\n  </code></p>\r\n  <p>In the src folder is our project code. These are the src files:</p>\r\n  <p><code style=\"font-family:'Consolas';\">\r\n      src <br/>\r\n      |- <b>app:</b></code> <b>contains modules and components of our app</b><br /> <code\r\n      style=\"font-family:'Consolas';\">\r\n      |&nbsp;&nbsp; |-- ... <br/>\r\n      |- assets:</code> folder for images and files<br /><code style=\"font-family:'Consolas';\">\r\n      |&nbsp;&nbsp; |-- ... <br/>\r\n      |- environments:</code> configuration for environment<br /><code style=\"font-family:'Consolas';\">\r\n      |&nbsp;&nbsp; |-- ... <br/>\r\n      |- browserlist:</code> configuration for the code editor<br /> <code style=\"font-family:'Consolas';\">\r\n      |- favicon.ico:</code> icon used in the browser bookmark bar<br /><code style=\"font-family:'Consolas';\">\r\n      |- index.html:</code> main HTML page<br /><code style=\"font-family:'Consolas';\">\r\n      |- main.ts:</code> compiles the application<br /><code style=\"font-family:'Consolas';\">\r\n      |- polyfills.ts:</code> polyfill scripts<br /><code style=\"font-family:'Consolas';\">\r\n      |- styles.css:</code> stylesheet for the project<br /><code style=\"font-family:'Consolas';\">\r\n      |- test.ts:</code> entry point for unit tests<br /><code style=\"font-family:'Consolas';\">\r\n      |- tsconfig.app.json:</code> inherits from the workspace-wide tsconfig.json file<br /><code\r\n      style=\"font-family:'Consolas';\">\r\n      |- tsconfig.spec.json:</code> inherits from the workspace-wide tsconfig.json file<br /><code\r\n      style=\"font-family:'Consolas';\">\r\n      |- tslint.json:</code> inherits from the workspace-wide tslint.json file<br /><code style=\"font-family:'Consolas';\">\r\n    </code></p>\r\n  <p>In the app folder is the logic and data of our application. It always contains the following files:</p>\r\n  <p><code style=\"font-family:'Consolas';\">\r\n        app <br/>\r\n        |- app-routing.module:</code> provided for the router (navigation)<br /> <code style=\"font-family:'Consolas';\">\r\n        |- app.component.html:</code> HTML template, shell of the application and called in the index.html with\r\n    <code style=\"font-family:'Consolas';\">app-root</code><br /><code style=\"font-family:'Consolas';\">\r\n        |- app.component.spec.ts:</code> defines unit test for the root <code\r\n      style=\"font-family:'Consolas';\">AppComponent</code><br /><code style=\"font-family:'Consolas';\">\r\n        |- app.component.ts:</code> defines logic for the <code style=\"font-family:'Consolas';\">AppComponent</code><br />\r\n    <code style=\"font-family:'Consolas';\">\r\n        |- app.module.ts:</code> all used modules are declared here <br /><code style=\"font-family:'Consolas';\">\r\n      </code></p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" class=\"ui message\" style=\"margin-top: 20px;\">\r\n  <h4>Angular Modules</h4>\r\n  <p>Angular modules help structuring the application by function. Technically modules are classes like all other\r\n    Angular blocks. The <code style=\"font-family:'Consolas';\">NgModule</code>-decorator makes the class a module.\r\n    Decorators define metadata which Angular will need\r\n    at runtime to initialise the application.\r\n  </p>\r\n  <p>Decorators are specific functions that can be used for classes and their\r\n    properties, methods and parameters. They are called at runtime and expand the functionality of a class. Decorators\r\n    always start with an <code style=\"font-family:'Consolas';\">@</code>-symbol.\r\n  </p>\r\n  <p>The class <code style=\"font-family:'Consolas';\">main.ts</code> is the main Angular module for every\r\n    project. With <code style=\"font-family:'Consolas';\">declarations</code> all components, directives and pipes that\r\n    belong to this module are\r\n    declared. With <code style=\"font-family:'Consolas';\">providers</code> all providers are registered. In <code\r\n      style=\"font-family:'Consolas';\">exports</code> you specify all\r\n    components, directives and pipes which should be available for other Angular modules. <code\r\n      style=\"font-family:'Consolas';\">imports</code> contains\r\n    all Angular modules on which this module depends. And <code style=\"font-family:'Consolas';\">bootstrap</code> defines\r\n    the main component of the\r\n    application. The main component is the root of the application. As you will learn in the chapter <a\r\n      routerLink=\"/components\">Components</a> the root is the <code style=\"font-family:'Consolas';\">AppComponent</code>.\r\n  </p>\r\n  <p>You can use different module\r\n    types such as the main module (<code style=\"font-family:'Consolas';\">module.ts</code>), routing-module and\r\n    service-module. A routing-module\r\n    contains configuration for the router. You will learn about the <code style=\"font-family:'Consolas';\">router</code>\r\n    in the chapter <a routerLink=\"/router\">Router</a>. A service-module provides logic / functions for the entire\r\n    application as you\r\n    will learn in the chapter <a routerLink=\"/service\">Service</a>.\r\n  </p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Git</h4>\r\n  <p>Before we make changes, we want to manage our project with Git. As you already know, Visual Studio Code comes with\r\n    a Git integration. My recommendation is to install Sourcetree, open a new tab and add the project folder, so you can\r\n    manage Git from Sourcetree. Of course, you can also use your command line, Git Gui or Visual Studio Code.</p>\r\n  <p class=\"ui info message\" style=\"margin-bottom:30px;\">\r\n    Please note: If you use Git it will not save the folder node_modules in the Git repository. So if you clone your project\r\n    for the first time you need to install all dependencies via <code style=\"font-family:'Consolas';\">npm install</code> (this time as an administrator). \r\n    Also make sure, that you have installed Node.js and the Angular-CLI (see chapter <a routerLink=\"/environment\">Environment</a>).\r\n  </p>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n\r\n  <h4>Make some changes</h4>\r\n  <p>Open <b>app.component.ts</b> and change the title of the app.</p>\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">export </span><span style=\"color:#359aff;\">class</span><span style=\"color:#ffffff;\"> AppComponent </span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#ff8000;\">title </span><span style=\"color:#008000;\">= </span><span style=\"color:#ffff80;\">&#39;Where To Go&#39;</span><span style=\"color:#b16565;\">\r\n}</span></pre>\r\n  </div>\r\n  <p>In the <b>app.component.html</b> is a binding to \"title\". This binding brings the new title into the application.\r\n  </p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">  Welcome to  <span>{{</span> title <span>}}</span>!\r\n</span></pre>\r\n  </div>\r\n  <img class=\"ui image medium centered border\" src=\"assets/img/Angular-Changed-Title.png\">\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Import UI-Framework</h4>\r\n  <p>As this is a web application showing you how to build an Angular app, there is no need to do CSS styling. Probably\r\n    you already know how to style with CSS and the focus here should be Angular. That's why we are going to use the\r\n    Semantic UI CSS-Framework for a nice look and feel.</p>\r\n  <p>\r\n    With the \"plus\"-button you can add another terminal to type in new commands while running the application.\r\n  </p>\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/Second-Terminal.png\"></p>\r\n  <p>You can install the UI-Framework with the command:</p>\r\n  <p class=\"ui message black\"><code style=\"font-family:'Consolas';\">npm i --save semantic-ui-css</code></p>\r\n  <p>Add to the file <b>angular.json</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#359aff;\">&quot;styles&quot;</span><span style=\"color:#ffffff;\">: [\r\n  </span><span style=\"color:#ffff80;\">&quot;node_modules/semantic-ui-css/semantic.css&quot;</span><span style=\"color:#ffffff;\">,\r\n  </span><span style=\"color:#ffff80;\">&quot;src/styles.css&quot;\r\n</span><span style=\"color:#ffffff;\">]</span></pre>\r\n\r\n  </div>\r\n\r\n  <p>Now you can test the new style. Adjust the <b>app.component.html</b> like this and see if it looks different:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;text-align:center&quot; </span><span style=\"color:#359aff;\">&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;h1 </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui header&quot; </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin: </span><span style=\"color:#00ff40;\">30px</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n</span><span style=\"color:#ffffff;\">    Welcome to <span>{{</span> title <span>}}</span>!\r\n  </span><span style=\"color:#359aff;\">&lt;/h1&gt;\r\n&lt;/div&gt;\r\n</span><span style=\"color:#359aff;\">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span></pre>\r\n\r\n  </div>\r\n  <p class=\"ui info message\">If you have any problems with installing the semantic ui css, here are some tips that may\r\n    help. If you get the\r\n    message \"<code style=\"font-family:'Consolas';\">found 1 high severity vulnerability</code>\" on the console, just run\r\n    \"<code style=\"font-family:'Consolas';\">npm audit fix</code>\". Next you can try a\r\n    restart of Visual Studio Code. If this is also not working, you can download it by yourself <a\r\n      href=\"https://github.com/Semantic-Org/Semantic-UI-CSS\" target=\"_blank\">(Semantic\r\n      UI CSS Download)</a> and paste it in your project folder.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n\r\n  <h4>Visualization of the Construction:</h4>\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-1.png\"></p>\r\n  <div class=\"ui success message\">\r\n    <h4>Summary</h4>\r\n    <ul>\r\n      <li>You generated the initial app skeleton with the Angular CLI.</li>\r\n      <li>You changed the title and displayed it via data-binding (curly braces).</li>\r\n      <li>You imported an ui framework.</li>\r\n      <li>You learned about the app structure and modules.</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\r\n    src=\"https://stackblitz.com/edit/where-to-go-step-1?embed=1&file=src/app/app.component.html&hideNavigation=1\"></iframe>\r\n\r\n  <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\r\n    <h4>Your Progress:</h4>\r\n    <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"10\"></mat-progress-bar>\r\n  </div>\r\n\r\n</div>"

/***/ }),

/***/ "./src/app/application/application.component.ts":
/*!******************************************************!*\
  !*** ./src/app/application/application.component.ts ***!
  \******************************************************/
/*! exports provided: ApplicationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationComponent", function() { return ApplicationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ApplicationComponent = /** @class */ (function () {
    function ApplicationComponent(service) {
        this.service = service;
    }
    ApplicationComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    ApplicationComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    ApplicationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-application',
            template: __webpack_require__(/*! ./application.component.html */ "./src/app/application/application.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], ApplicationComponent);
    return ApplicationComponent;
}());



/***/ }),

/***/ "./src/app/components-formmodules-directives/components-formmodules-directives.component.html":
/*!****************************************************************************************************!*\
  !*** ./src/app/components-formmodules-directives/components-formmodules-directives.component.html ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>Components, FormModules and Directives</h2>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\r\n    <h5>User Story</h5>\r\n    <p>As a <b>user</b><br />\r\n        I want to <b>display all lectures in a timetable and click to select one</b>, <br />\r\n        to <b> look through all of them and change the selected one</b>.</p>\r\n</div>\r\n<div *ngIf=\"praxis\">\r\n    <h4>Mock Data</h4>\r\n    <p>Later we will have more than one lecture and therefore we will need a list to display all of them. </p>\r\n    <p class=\"ui message black\"><code style=\"font-family:'Consolas';\">ng g component timetable</code></p>\r\n    <p>Because we don't get our data from a server we will create some mock-data and pretend that they are from a\r\n        server.</p>\r\n    <p class=\"ui message black\"><code style=\"font-family:'Consolas';\">ng g class shared/mock-lectures</code></p>\r\n    <p>Remove the class in this file and define the constant LECTURES as an array of lectures and export it. The content is the same\r\n        as in the property lecture from the lecture-item.component.ts, so you can copy the first lecture from there and\r\n        paste\r\n        it a few times for different lectures. The id must always be different!</p>\r\n    <div class=\"ui info message\">\r\n        <p>Later we will have drop-downs for day, time and building. To avoid problems, please make sure that: <br>\r\n            Your day looks like that: Monday, Tuesday, Wednesday, Thursday, Friday.<br>\r\n            Your hours are between 08 and 19 and always consists of two numbers.<br>\r\n            Your minutes are 00, 15, 30 or 45.<br>\r\n            Your building is KR1, WE5, F21 or M3.\r\n        </p>\r\n    </div>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">export </span><span style=\"color:#359aff;\">const</span><span style=\"color:#ffffff;\"> LECTURES</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#008000;\">[] </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[\r\n    </span><span style=\"color:#b16565;\">&#123;\r\n        </span><span style=\"color:#ffffff;\">id</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">1</span><span style=\"color:#b16565;\">,\r\n        </span><span style=\"color:#ffffff;\">name</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;Webtechnologien&#39;</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">    room</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;075&#39;</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">    day</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;Monday&#39;</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">    time</span><span style=\"color:#008000;\">: </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> hours</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">10</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> minutes</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">15 </span><span style=\"color:#b16565;\">&#125;,\r\n    </span><span style=\"color:#ffffff;\">    building</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;WE5&#39;</span><span style=\"color:#b16565;\">,\r\n        </span><span style=\"color:#ffffff;\">floor</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;02&#39;</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">    department</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;Lehrstuhl f√ºr Medieninformatik&#39;\r\n    </span><span style=\"color:#b16565;\">&#125;,\r\n    </span><span style=\"color:#b16565;\">&#123;\r\n        </span><span style=\"color:#ffffff;\">id</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">2</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">    ... and so on\r\n    </span><span style=\"color:#b16565;\">&#125;\r\n</span><span style=\"color:#008000;\">]</span></pre>\r\n    </div>\r\n\r\n    <p>After that, you can delete the property lecture from the <b>lecture-item.component.ts</b> and initialise the\r\n        constant in the <b>timetable.component.ts</b>, because we need the data in the list now.</p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">lectures </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> LECTURES</span><span style=\"color:#b16565;\">;</span></pre>\r\n    </div>\r\n    <p>Of course we also need to import the constant <code style=\"font-family:'Consolas';\">LECTURES</code> now.</p>\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LECTURES </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/mock-lectures&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n    </div>\r\n\r\n\r\n    <h4>Display a List</h4>\r\n    <p>\r\n        We generated our shell for the lecture items. The timetable is going to be a list with all the lectures we\r\n        have.\r\n    </p>\r\n    <p>First we have to write the code for a single lecture item and replace the code in\r\n        <b>lecture-item.component.html</b>: </p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;content&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;header&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">What? <span>{{</span>lecture.name | uppercase<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Where? <span>{{</span>lecture.building<span>}}</span>/\r\n        <span>{{</span>lecture.floor<span>}}</span>.<span>{{</span>lecture.room<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">When? <span>{{</span>lecture.day<span>}}</span>, \r\n        <span>{{</span>lecture.time.hours<span>}}</span>:<span>{{</span>lecture.time.minutes<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;lecture.department&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Department: \r\n        <span>{{</span>lecture.department<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n&lt;/a&gt;</span></pre>\r\n\r\n    </div>\r\n    <p>Next change the selector in the <b>lecture-item.component.ts</b>:</p>\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">selector</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;a.app-lecture-item&#39;</span><span style=\"color:#b16565;\">,</span></pre>\r\n    </div>\r\n    <p>And insert this right above the empty constructor:</p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">@</span><span style=\"color:#ff4848;\">Input</span><span style=\"color:#b16565;\">()</span><span style=\"color:#ffffff;\"> lecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#b16565;\">;</span></pre>\r\n    </div>\r\n    <p>For that, we need to import the class <code style=\"font-family:'Consolas';\">Input</code>.</p>\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Input </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/core&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n    <h4>Input-Property</h4>\r\n    <p>\r\n        You can transfer data, especially between parent- and children-components via\r\n        <code style=\"font-family:'Consolas';\">@Input()</code>-property. The\r\n        decorator marks the class field as an input property and provides configuration metadata. This declares a\r\n        data-bound input property, which is automatically updated during change detection.\r\n    </p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n    <p>We display this component in the <b>app.component.html</b> and replace the lecture-item with this code:</p>\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">&lt;app-timetable&gt;&lt;/app-timetable&gt;</span></pre>\r\n    </div>\r\n    <p>In the <b>timetable.component.html</b> we display the list of lecture-items now with a header beyond and a\r\n        for-loop, because every item should be displayed the same way:</p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin-top: </span><span style=\"color:#00ff40;\">15px</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;&lt;/div&gt;\r\n    &lt;h2 </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui header&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Timetable:</span><span style=\"color:#359aff;\">&lt;/h2&gt;\r\n    &lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;padding: </span><span style=\"color:#00ff40;\">15px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui middle aligned divided list&quot;</span><span style=\"color:#359aff;\">&gt;\r\n            </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngFor</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;let l of lectures&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;item&quot;</span><span style=\"color:#359aff;\">&gt;\r\n                </span><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;app-lecture-item item&quot; [lecture]</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;l&quot; \r\n                </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin: </span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\"> padding:</span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;&lt;/a&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n&lt;/div&gt; </span></pre>\r\n    </div>\r\n    <p>With the construct <code style=\"font-family:'Consolas';\">[lecture]=\"l\"</code> we make sure that <code\r\n            style=\"font-family:'Consolas';\">l</code> is the lecture\r\n        we imported via input-binding\r\n        before.</p>\r\n    <p class=\"ui info message\">\r\n        Property-Binding: Sets properties of the DOM-Tree. Syntax:<br />\r\n        <code style=\"font-family:'Consolas';\">[ ] = \" \"</code>\r\n    </p>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n    <h4>Directives</h4>\r\n    <p>Constructs like <code style=\"font-family:'Consolas';\">*ngFor</code> are called \"Directives\". With this you can\r\n        make loops in the HTML similar to\r\n        loops in the logic code (TypeScript, Java,...), as you may know. </p>\r\n    <p>Every time I iterate over my list of items (if you also read the code examples, it's a list of lectures) I take\r\n        one single item out of all items, for which is displayed what I defined for it as HTML code before. With the\r\n        attribute <code style=\"font-family:'Consolas';\">[lecture]</code> I assign the respective lecture object. And\r\n        with\r\n        this for-loop I repeat this for all the items (lectures) I have.</p>\r\n    <p>Another directive we already used before is <code style=\"font-family:'Consolas';\">*ngIf</code>. For those who\r\n        read the code: because we made\r\n        department an optional property, someone may not set a value for this property. So we want to ask if this\r\n        property has a value and just display\r\n        the corresponding <code style=\"font-family:'Consolas';\">div</code> if it has one.</p>\r\n    <p>This is also called templating-microsyntax, because the way we iterate over an array isn't just a simple\r\n        templating expression, it is a very small own language which generates DOM-elements. For every element in the\r\n        array it creates a new instance of something. In this case\r\n        <code style=\"font-family:'Consolas';\">&lt;a class=\"app-lecture-item item\" ...&gt;&lt;/a&gt;</code>.</p>\r\n    <p class=\"ui info message\">\r\n        Structurdirectives: Directives to manipulate the DOM-Tree.\r\n        Syntax:\r\n        <br />\r\n        <code style=\"font-family:'Consolas';\">*ngFor=\"let lecture of lectures\" <br />\r\n        *ngIf=\"lecture.department\"</code>\r\n    </p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n    <h4>Visualization of the Construction:</h4>\r\n    <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-4.png\"></p>\r\n\r\n    <h4>Details View</h4>\r\n    <p>Later we want to be able to make changes within a lecture item so we want to select one lecture and get its\r\n        details\r\n        view via click. First we need a variable for the selected lecture in the <b>timetable.component.ts</b>\r\n        and second we need a function, we call it <code style=\"font-family:'Consolas';\">onSelect()</code>, which assigns\r\n        the clicked lecture from the\r\n        template to the <code style=\"font-family:'Consolas';\">selectedLecture</code> of the component.</p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">selectedLecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#b16565;\">;</span>\r\n<span style=\"color:#ffffff;\">onSelect</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;</span>\r\n    <span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.selectedLecture </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> lecture</span><span style=\"color:#b16565;\">;\r\n&#125;</span></pre>\r\n    </div>\r\n    <p>Of course we also need to import the class <code style=\"font-family:'Consolas';\">Lecture</code>.</p>\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n    </div>\r\n\r\n    <p>We add a click-event-binding to the <b>timetable.component.html</b>:</p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;app-lecture-item item&quot; [lecture]</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;l&quot; \r\n    (click)</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;onSelect(l)&quot; </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin: </span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\"> padding:</span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;&lt;/a&gt;</span></pre>\r\n    </div>\r\n    <p class=\"ui info message\">Event-Binding: Interrogate results and treat them. Syntax: <br />\r\n        <code style=\"font-family:'Consolas';\">() = \" \"</code>\r\n    </p>\r\n    <p>We want to display the clicked lecture beneath the list of all lectures. therefore we need to add some code for\r\n        the selected lecture, but only if there is a lecture selected. To make this sure, we have the <code\r\n            style=\"font-family:'Consolas';\">*ngIf</code>\r\n        directive.</p>\r\n    <p>In the <b>timetable.component.html</b> we need to insert the following code snippet beneath the existing code:\r\n    </p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;padding: </span><span style=\"color:#00ff40;\">15px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui middle aligned divided list&quot;</span><span style=\"color:#359aff;\">&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;selectedLecture&quot; </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;padding: </span><span style=\"color:#00ff40;\">50px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;h4&gt;</span><span style=\"color:#ffffff;\"> <span>{{</span>selectedLecture.name<span>}}</span> Details </span><span style=\"color:#359aff;\">&lt;/h4&gt;\r\n                </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Where? <span>{{</span>selectedLecture.building<span>}}</span>/\r\n                <span>{{</span>selectedLecture.floor<span>}}</span>.<span>{{</span>selectedLecture.room<span>}}</span> </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n                </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">When? <span>{{</span>selectedLecture.day<span>}}</span>,\r\n                <span>{{</span>selectedLecture.time.hours<span>}}</span>:<span>{{</span>selectedLecture.time.minutes<span>}}</span> </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n                </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;selectedLecture.department&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Department:\r\n            <span>{{</span>selectedLecture.department<span>}}</span> </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n&lt;/div&gt;</span></pre>\r\n    </div>\r\n    <p>Now we asked, is there a <code style=\"font-family:'Consolas';\">selectedLecture</code>? If there is, display the\r\n        <code style=\"font-family:'Consolas';\">selectedLecture.name, selectedLecture.building</code>\r\n        and all the other information.</p>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n    <h4>Make it an Input Form</h4>\r\n    <p>If we want to make changes in the details of a lecture, we will need two-way-binding and input fields.\r\n    </p>\r\n    <p class=\"ui info message\">Two-Way-Binding: Can read in properties and process results. Syntax: <br />\r\n        <code style=\"font-family:'Consolas';\">[()] = \" \"</code>\r\n    </p>\r\n    <p>First we need to import the FormsModule in <b>app.module.ts</b>:</p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre\r\n            style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> FormsModule </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/forms&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n    </div>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">imports</span><span style=\"color:#008000;\">: </span><span style=\"color:#008000;\">[\r\n    </span><span style=\"color:#ffffff;\">...</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">FormsModule\r\n</span><span style=\"color:#008000;\">]</span><span style=\"color:#b16565;\">,</span></pre>\r\n    </div>\r\n    <p>Afterwards we can make the changes in <b>timetable.component.html</b> with <code\r\n            style=\"font-family:'Consolas';\">[(ngModel)]</code>, the\r\n        bidirectional data-binding of Angular. It binds the selectedLecture.name property to the HTML input field so\r\n        that\r\n        data can flow in both directions: from the selectedLecture.name property to the input field and from the input\r\n        field\r\n        back to the selectedLecture.name.</p>\r\n    <p>This is going to be a lot of code, because the input form should already look good and provide drop-downs for an\r\n        easier input. For one item the code will look like this:</p>\r\n\r\n    <div class=\"ui message black\">\r\n        <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;field&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;label&gt;</span><span style=\"color:#ffffff;\">Name of the Lecture*:</span><span style=\"color:#359aff;\">&lt;/label&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;field&quot;</span><span style=\"color:#359aff;\">&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;input</span><span style=\"color:#ffffff;\"> [(ngModel)]</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;selectedLecture.name&quot; </span><span style=\"color:#ff4848;\">placeholder=</span><span style=\"color:#ffffff;\">&quot;Name&quot; </span><span style=\"color:#359aff;\">/&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n&lt;/div&gt;</span></pre>\r\n    </div>\r\n    <p>Replace the old code for the details with this code for every input and finally the app looks like in the code\r\n        editor at the end of this page.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n    <h4>Visualization of the Construction:</h4>\r\n    <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-5.png\"></p>\r\n    <div class=\"ui success message\">\r\n        <h4>Summary</h4>\r\n        <ul>\r\n            <li>You learned about directives.</li>\r\n            <li>You used <code style=\"font-family:'Consolas';\">*ngIf</code> to show or hide the department.</li>\r\n            <li>You binded the lecture via <code style=\"font-family:'Consolas';\">@Input()</code> binding and set the\r\n                property via property binding.</li>\r\n            <li>You applied the <code style=\"font-family:'Consolas';\">*ngFor</code> directive to display a list of\r\n                lectures.</li>\r\n            <li>You prepared a details view for lectures and displayed it with a click event.</li>\r\n            <li>You imported the <code style=\"font-family:'Consolas';\">FormsModule</code> in the <code\r\n                    style=\"font-family:'Consolas';\">AppModule</code>.</li>\r\n            <li>You made the details view editable because you applied the <code\r\n                    style=\"font-family:'Consolas';\">NgModel</code> directive and made it an input form.</li>\r\n        </ul>\r\n    </div>\r\n    <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\r\n        src=\"https://stackblitz.com/edit/where-to-go-step-3?embed=1&file=src/app/timetable/timetable.component.html&hideNavigation=1\"></iframe>\r\n\r\n    <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\r\n        <h4>Your Progress:</h4>\r\n        <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"35\"></mat-progress-bar>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/components-formmodules-directives/components-formmodules-directives.component.ts":
/*!**************************************************************************************************!*\
  !*** ./src/app/components-formmodules-directives/components-formmodules-directives.component.ts ***!
  \**************************************************************************************************/
/*! exports provided: ComponentsFormmodulesDirectivesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentsFormmodulesDirectivesComponent", function() { return ComponentsFormmodulesDirectivesComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ComponentsFormmodulesDirectivesComponent = /** @class */ (function () {
    function ComponentsFormmodulesDirectivesComponent(service) {
        this.service = service;
    }
    ComponentsFormmodulesDirectivesComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    ComponentsFormmodulesDirectivesComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
        console.log(this.modus);
    };
    ComponentsFormmodulesDirectivesComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-components-formmodules-directives',
            template: __webpack_require__(/*! ./components-formmodules-directives.component.html */ "./src/app/components-formmodules-directives/components-formmodules-directives.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], ComponentsFormmodulesDirectivesComponent);
    return ComponentsFormmodulesDirectivesComponent;
}());



/***/ }),

/***/ "./src/app/components/components.component.html":
/*!******************************************************!*\
  !*** ./src/app/components/components.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>Components</h2>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\r\n  <h5>User Story</h5>\r\n  <p>As a <b>user</b><br />\r\n    I want to <b>display a lecture</b>, <br />\r\n    to <b> see its details</b>.</p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-bottom: 20px;\" class=\"ui message\">\r\n  <h4>What are Components?</h4>\r\n  <p>A component controls a specific part of the screen. In the HTML file you define the structure of a component and\r\n    the CSS\r\n    styles\r\n    this structure, together it's the view of the component. The TypeScript file is the logic part of the component. An\r\n    Angular application is basically an application with a tree structure. It has a root, that is the\r\n    <code style=\"font-family:'Consolas';\">AppComponent</code> and it's also the entry point of the application. However,\r\n    there is no difference to\r\n    the other components in concept or syntax. Only difference is that the Angular framework knows that this component\r\n    is the entry point of the application. If you have the root component you can put other components inside. You can\r\n    interlace the components more and more. This is the most important architecture-concept of Angular.</p>\r\n  <p>Components consist of three parts. A class with the <code\r\n      style=\"font-family:'Consolas';\">@Component</code>-decorator which makes it a component,\r\n    the template and the CSS styles (optional). With the template of a component you define what the user sees at\r\n    runtime. In addition you can define the user interaction. The template is written in HTML and additional syntax\r\n    elements like data-binding.</p>\r\n  <p><img class=\"ui image big centered\" src=\"assets/img/Components-1.png\"></p>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Generate new Component</h4>\r\n  <p>Open your command line in Visual Studio Code and generate (short form <code\r\n      style=\"font-family:'Consolas';\">g</code>) your \"where-to-go\"\r\n    component. It's going to be the page you see\r\n    first when you start the app.</p>\r\n  <p class=\"ui message black\"> <code style=\"font-family:'Consolas';\">ng g component where-to-go</code></p>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>Result:</p>\r\n  <p><img class=\"ui image centered\" style=\"height: 65px\" src=\"assets/img/Create-Three-Files.png\"></p>\r\n  <p>When you add a new component the app.module.ts automatically imports your new component. The CLI creates three\r\n    files in one folder for you.\r\n    It's the skeleton for your component. The HTML file is nearly\r\n    empty and ready for your code. You can ignore the spec.ts file, it defines a unit test for the component.\r\n    The .ts file is for your TypeScript code and defines the components logic.\r\n  </p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p><img class=\"ui image medium centered\" src=\"assets/img/Skeleton-Component.png\"></p>\r\n  <p>There are some interesting things about the skeleton of the component.ts files. <code\r\n      style=\"font-family:'Consolas';\">@Component</code> is a\r\n    decorator function which specifies the Angular metadata for the component. The CLI generates three metadata\r\n    properties:</p>\r\n  <ul>\r\n    <li><code style=\"font-family:'Consolas';\">selector</code>: the CSS-element-selector of the component </li>\r\n    <li><code style=\"font-family:'Consolas';\">templateURL</code>: the location of the components' template file</li>\r\n    <li><code style=\"font-family:'Consolas';\">styles</code>: the location of the private CSS style of the component\r\n      (here empty, because we decided to\r\n      import the semantic-ui for a overall style and thereforee we generated the project without a CSS for every\r\n      component)\r\n    </li>\r\n  </ul>\r\n  <p>The <code style=\"font-family:'Consolas';\">selector</code> 'app-where-to-go' matches with the name of the HTML\r\n    element. This name identifies the\r\n    component within the template of the parent-component.</p>\r\n  <p><code style=\"font-family:'Consolas';\">ngOnInit</code> is a lifecycle hook function. Angular calls this function\r\n    shortly after creating the\r\n    component. It is the right function to place initialisation logic.</p>\r\n  <p>The components' class always needs to be exported, to reuse it anywhere else e.g. in the AppModule.</p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <h4>Lifecycle of a Component</h4>\r\n  <p>Every component has a lifecycle that is managed by Angular. Angular creates the component and renders the component\r\n    and its children. Angular also checks if the databounded properties change and destroys the component before\r\n    removing it from\r\n    the DOM. The Angular Framework provides lifecycle hooks for the programers which give an insight into these specific\r\n    moments of the app and also make them able to act at occurrence.</p>\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/Lifecycle.png\"></p>\r\n  <p>The constructor is not Angular specific, but important when considering the lifecycle of a component since it is\r\n    responsible for the instantiation of the component. You shouldn't put much logic into the constructor because when\r\n    the\r\n    constructor is called, neither input- / output-bindings are available nor the child-components.</p>\r\n  <p><code style=\"font-family:'Consolas';\">ngOnInit</code> offers you the possibility to initialise your component. It\r\n    is guaranteed that all bindings\r\n    are ready. It offers you the possibility to run all the initialisation logic you have, for example to request\r\n    the data from the backend. <code style=\"font-family:'Consolas';\">ngOnInit</code> isn't just a function, Angular\r\n    has a TypeScript interface\r\n    <code style=\"font-family:'Consolas';\">OnInit</code>. The framework has its own interface for all lifecycle-hooks.\r\n  </p>\r\n  <p><code style=\"font-family:'Consolas';\">ngOnChanges</code> is called one time before <code\r\n      style=\"font-family:'Consolas';\">ngOnInit</code> and after that every time an\r\n    <code style=\"font-family:'Consolas';\">Input</code> binding changes.\r\n  </p>\r\n  <p>With <code style=\"font-family:'Consolas';\">ngAfterContentInit</code> you can react to the initialisation of\r\n    child-components.</p>\r\n  <p>The view of the child-components is accessable with the <code\r\n      style=\"font-family:'Consolas';\">ngAfterViewInit</code>.</p>\r\n  <p>You can do some cleaning with <code style=\"font-family:'Consolas';\">ngOnDestroy</code> before a component will be\r\n    destroyed. This might be\r\n    necessary if a component asks a service or other components for updates frequently.</p>\r\n  <p>With the methods <code style=\"font-family:'Consolas';\">ngAfterContentChecked</code> and <code\r\n      style=\"font-family:'Consolas';\">ngAfterViewChecked</code> you can monitor the\r\n    Angular ChangeDetection. This mechanism is responsible for redrawing the components after changes. While the\r\n    checked-flag that every component has is false, Angular checks to see if the component needs to be redrawn. The\r\n    performance of the application will be better the less the ChangeDetection runs and with the methods you can control\r\n    this.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Reuse a Component</h4>\r\n  <p>We can now use the <code style=\"font-family:'Consolas';\">selector</code></p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">&lt;app-where-to-go&gt;&lt;/app-where-to-go&gt;</span></pre>\r\n  </div>\r\n  <p>and insert it into the <b>app.component.html</b>. Now the app shows the component at this location, just like it\r\n    would do with every other HTML tag.</p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <h4>Communication between Logic and View</h4>\r\n  <p>As we already learned every component consists of two parts, logic (means component.ts) and view (means\r\n    component.html). To ensure a communication between these two we can use different types of bindings.</p>\r\n  <ol>\r\n    <li>Property Binding: <br />they allow you to set the value of a DOM property based on an expression.\r\n      You assign them with square brackets.<br />\r\n      <code style=\"font-family:'Consolas';\">&lt;element [property]=\"expression\"&gt;...&lt;/element&gt;</code>\r\n    </li>\r\n    <li>Interpolation: <br />\r\n      helps to display properties of the component or calculated values as strings in the HTML view.<br />\r\n      <code\r\n        style=\"font-family:'Consolas';\">&lt;div&gt;<span>{{</span> component-property <span>}}</span>&lt;/div&gt;</code>\r\n    </li>\r\n    <li>Event Binding: <br />\r\n      this is kind of the opposite of property binding. It's possible to react to the occurrence of DOM events, e.g. in\r\n      order to change the application model.<br />\r\n      <code style=\"font-family:'Consolas';\">&lt;element (eventname)=\"action\"&gt;...&lt;/element&gt;</code>\r\n\r\n    </li>\r\n    <li>Two-Way Binding: <br />\r\n      use this if you want to bind an input-component directly to a value of your component class.<br />\r\n      <code style=\"font-family:'Consolas';\">&lt;input [(ngModel)]=\"text\"&gt;...&lt;/input&gt;</code><br />\r\n      It's a combination of two bindings and you could write the expanded form too.<br />\r\n      <code\r\n        style=\"font-family:'Consolas';\">&lt;input [ngModel]=\"text\" (ngModelChange)=\"setOtherText($event)\"&gt;...&lt;/input&gt;</code>\r\n    </li>\r\n    <li>Local Template-Variables: <br />\r\n      you can create a local variable. With this you have now access to the whole DOM-API of the input field.<br />\r\n      <code style=\"font-family:'Consolas';\">&lt;element #myElement&gt;...&lt;/element&gt;<br/>\r\n        </code>\r\n    </li>\r\n  </ol>\r\n  <br /><a href=\"https://stackblitz.com/edit/practice-part-1?embed=1&file=src/app/app.component.ts&hideNavigation=1\"\r\n    target=\"_blank\">Click here to try it!</a>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Create and show Property</h4>\r\n  <p>Now we will use data-binding to show a temporary text message on the \"Home\" page until we are ready to show the\r\n    information about the next lecture we have to go to. Put this property into <b>where-to-go.component.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#ffffff;\">tempText</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string </span><span style=\"color:#008000;\">= </span><span style=\"color:#ffff80;\">&quot;Here will appear your information soon!&quot;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <p>and replace the auto generated code in the <b>where-to-go.component.html</b> with this code:</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\"><span>{{</span> tempText <span>}}</span></span></pre>\r\n  </div>\r\n  <p>This kind of data-binding is called interpolation and you just displayed the value of the property \"tempText\" via\r\n    your\r\n    HTML code.</p>\r\n  <p class=\"ui info message\">Interpolation: Shows data in the template. Syntax: <br />\r\n    <code style=\"font-family:'Consolas';\"><span>{{</span> &nbsp; <span>}}</span></code>\r\n  </p>\r\n\r\n  <h4>Visualization of the Construction:</h4>\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-2.png\"></p>\r\n  <h4>Create Class</h4>\r\n  <p>For our project we are going to need a class to define a lecture. With this code you can generate a TypeScript\r\n    class in a new folder named \"shared\":</p>\r\n  <p class=\"ui message black\"><code style=\"font-family:'Consolas';\">ng g class shared/lecture</code></p>\r\n  <p>In this new class we define the constructor for lecture.</p>\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \">  <span style=\"color:#ff8000;\">constructor</span><span style=\"color:#b16565;\">(\r\n    </span><span style=\"color:#359aff;\">public </span><span style=\"color:#ffffff;\">id</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffffff;\">number</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">public </span><span style=\"color:#ffffff;\">name</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">public</span><span style=\"color:#ffffff;\"> room</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">public</span><span style=\"color:#ffffff;\"> day</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">public</span><span style=\"color:#ffffff;\"> time</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Time</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">public</span><span style=\"color:#ffffff;\"> building</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">public </span><span style=\"color:#ffffff;\">floor</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">public</span><span style=\"color:#ffffff;\"> department</span><span style=\"color:#008000;\">?:</span><span style=\"color:#ffffff;\"> string\r\n  </span><span style=\"color:#b16565;\">)&#123; </span><span style=\"color:#b16565;\">&#125;</span></pre>\r\n  </div>\r\n  <p>The property department is optional in this constructor and therefore marked with a <code\r\n      style=\"font-family:'Consolas';\">?</code>. Angular has its\r\n    own type for time. Usually Visual Studio Code should ask you right away if you want to import it.</p>\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/Import-Time.png\"></p>\r\n  <p>If not, you can force it by placing the curser behind the underlined word and press STRG + space bar, or do it on\r\n    your own like this:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Time </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&quot;@angular/common&quot;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <h4>Generate Item Component</h4>\r\n  <p>We want to show a complete lecture now, so we generate the component lecture-item.</p>\r\n  <p class=\"ui message black\"><code style=\"font-family:'Consolas';\">ng g component lecture-item</code></p>\r\n  <p>We create a lecture inside the class LectureItemComponent in <b>lecture-item.component.ts</b> first and define all the properties the constructor\r\n    requires.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#008000;\">= </span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#ffffff;\">id</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">1</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">name</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;Webtechnologien&#39;</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">  room</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;075&#39;</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">  day</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;Monday&#39;</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">  time</span><span style=\"color:#008000;\">: </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> hours</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">10</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> minutes</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">15 </span><span style=\"color:#b16565;\">&#125;,\r\n  </span><span style=\"color:#ffffff;\">  building</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;WE5&#39;</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#ffffff;\">floor</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;02&#39;</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">  department</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;Lehrstuhl f√ºr Medieninformatik&#39;\r\n</span><span style=\"color:#b16565;\">&#125;</span></pre>\r\n  </div>\r\n\r\n  <p>Of course we also need to import the class <code style=\"font-family:'Consolas';\">Lecture</code>.</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n\r\n  <p>And in the <b>lecture-item.component.html</b> we can define what of this item we want to display and how we want to\r\n    display it. We\r\n    use the interpolation to display the properties of the component-class in this HTML-template.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;padding: </span><span style=\"color:#00ff40;\">50px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui middle aligned divided list&quot;</span><span style=\"color:#359aff;\">&gt;\r\n      </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;item&quot;</span><span style=\"color:#359aff;\">&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;content&quot;</span><span style=\"color:#359aff;\">&gt;\r\n          </span><span style=\"color:#359aff;\">&lt;h2 </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;padding-bottom: </span><span style=\"color:#00ff40;\">20px</span><span style=\"color:#ffffff;\">&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;header ui&quot;</span><span style=\"color:#359aff;\">&gt; \r\n            Lecture Details: </span><span style=\"color:#359aff;\">&lt;/h2&gt;\r\n          </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;header&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">What? <span>{{</span>lecture.name <span>}}</span>\r\n            </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n          </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Where? <span>{{</span>lecture.building<span>}}</span>/\r\n            <span>{{</span>lecture.floor<span>}}</span>.<span>{{</span>lecture.room<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n          </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">When? <span>{{</span>lecture.day<span>}}</span>, \r\n            <span>{{</span>lecture.time.hours<span>}}</span>:<span>{{</span>lecture.time.minutes<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n          </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;lecture.department&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;description&quot;</span><span style=\"color:#359aff;\">&gt;\r\n  </span><span style=\"color:#ffffff;\">          Department: <span>{{</span>lecture.department<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n      </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n&lt;/div&gt;</span></pre>\r\n  </div>\r\n  <p>To show it beneath the title and the where-to-go component we insert</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#ffffff;\">&lt;app-lecture-item&gt;&lt;/app-lecture-item&gt;</span></pre>\r\n  </div>\r\n  <p>into the <b>app.component.html</b>.</p>\r\n</div>\r\n\r\n<div *ngIf=\"theoryLarge\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <h4>Pipes</h4>\r\n  <p>In every application you will get data which you will transform and present to the user. This data could be\r\n    a simple local string variable, but also much more. You could display the data as raw values or you could\r\n    format them to achieve a better user experience. Angular comes along with many build-in pipes. With pipes you can\r\n    format strings, numbers and other displayed data.\r\n    Additionally it is possible to create your own pipes. In this case we are fine with the build-in pipes. For example\r\n    you can format the date of today.\r\n    <br>When you instantiate a <code style=\"font-family:'Consolas';\">Date</code> object\r\n    like this: <br />\r\n    <code style=\"font-family:'Consolas';\">today: Date = new Date();</code> <br />\r\n    and you display your date just \"raw\" in your HTML code like this:<br />\r\n    <code style=\"font-family:'Consolas';\"><span>{{</span>today<span>}}</span></code>,<br />\r\n    you will see this date-format:<br> {{today}}\r\n  </p>\r\n  <p>Probably users want to have another format for a date. So you can use pipes in your HTML to format the date like\r\n    this:</p>\r\n  <p>Code: <code style=\"font-family:'Consolas';\"><span>{{</span>today | date<span>}}</span></code> - Result:\r\n    {{today | date}}</p>\r\n  <p>Code: <code style=\"font-family:'Consolas';\"><span>{{</span>today | date: 'medium'<span>}}</span></code> - Result:\r\n    {{today | date: 'medium'}}</p>\r\n  <p>Code: <code style=\"font-family:'Consolas';\"><span>{{</span>today | date: 'fullDate'<span>}}</span></code> - Result:\r\n    {{today | date: 'fullDate'}}</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Try a Pipe</h4>\r\n  <p>We want to try the UppercasePipe, which formats our string in capital letters:</p>\r\n\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;\"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;header&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">What? <span>{{</span>lecture.name | uppercase<span>}}</span></span><span style=\"color:#359aff;\">&lt;/div&gt;</span></pre>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Visualization of the Construction:</h4>\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-3.png\"></p>\r\n  <div class=\"ui success message\">\r\n    <h4>Summary</h4>\r\n    <ul>\r\n      <li>With the Angular CLI you generated other components and a class.</li>\r\n      <li>You displayed the new components by adding them to the application shell <code\r\n          style=\"font-family:'Consolas';\">AppComponent</code>.</li>\r\n      <li>You learned about components, their lifecycle, bindings and pipes.</li>\r\n      <li>You used interpolation to show text in the template.</li>\r\n      <li>You used your knowledge about pipes and applied the <code\r\n          style=\"font-family:'Consolas';\">UppercasePipe</code>.</li>\r\n    </ul>\r\n  </div>\r\n  <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\r\n    src=\"https://stackblitz.com/edit/where-to-go-step-2?embed=1&file=src/app/app.component.ts&hideNavigation=1\"></iframe>\r\n\r\n  <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\r\n    <h4>Your Progress:</h4>\r\n    <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"20\"></mat-progress-bar>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/components/components.component.ts":
/*!****************************************************!*\
  !*** ./src/app/components/components.component.ts ***!
  \****************************************************/
/*! exports provided: ComponentsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentsComponent", function() { return ComponentsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ComponentsComponent = /** @class */ (function () {
    function ComponentsComponent(service) {
        this.service = service;
        this.today = Date.now();
    }
    ComponentsComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    ComponentsComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    ComponentsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-components',
            template: __webpack_require__(/*! ./components.component.html */ "./src/app/components/components.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], ComponentsComponent);
    return ComponentsComponent;
}());



/***/ }),

/***/ "./src/app/environment/environment.component.html":
/*!********************************************************!*\
  !*** ./src/app/environment/environment.component.html ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>How to set up the Environment:</h2>\r\n<div>\r\n  <h4>The Editor</h4>\r\n  <p>\r\n    As a perfect code editor for Angular I would recommend Visual Studio Code.\r\n    It works for all operating systems and comes with an own Git integration and support for TypesScript.\r\n  </p>\r\n  <p>If you don't have it already, just download it:</p>\r\n  <a href=\"https://code.visualstudio.com/download\" target=\"_blank\">Visual Studio Code Download Link</a>\r\n\r\n  <h4>Node.js</h4>\r\n  <p>\r\n    Node.js is a runtime environment for running JavaScript on the server and can be used for developing frontend and\r\n    backend.\r\n    It comes with the Node Package Manager (NPM).\r\n  </p>\r\n  <p>If you don't have Node, you can download and install it:</p>\r\n  <p><a href=\"https://nodejs.org/en/\" target=\"_blank\">Node.js Download Link</a></p>\r\n  <p>Next you should try to get the version number on your command line:</p>\r\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">node -v</code></p>\r\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">npm -v</code></p>\r\n  <p class=\"ui info message\">Angular requires Node.js version 8.x or 10.x, you always need to keep it up-to-date.</p>\r\n  <p>Now you can install packages like this: </p>\r\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">npm install your-package-name</code></p>\r\n  <p>Or global like this:</p>\r\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">npm install -g your-package-name</code></p>\r\n\r\n  <h4>Angular-CLI</h4>\r\n  <p>\r\n    Angular-CLI is a command line tool based on Node.js which helps you from the very beginning. When you start a new project, the CLI prepares everything for you:\r\n    It creates your files, installs the npm-packages and creates Git for you. It automatically generates skeletons for components, services, pipes and directives.\r\n  </p>\r\n  <p>\r\n    For Windows users I recommend windows-build-tools for a frictionless setup. You need to execute this installation as an administrator.</p>\r\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">npm install -g windows-build-tools</code></p>\r\n  <p>Now you can install the Angular-CLI by using this command:</p>\r\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">npm install -g @angular/cli</code></p>\r\n\r\n  <p class=\"ui red message\" style=\"margin-bottom:30px;\">In some cases it might be required to install the Angular-CLI as the user, that will use it. So if it does not work, try to install it with your local user.</p>\r\n\r\n  <p class=\"ui info message\" style=\"margin-bottom:30px;\">To help you with all the CLI commands: <a href=\"assets/files/Cheat-Sheet-Angular-CLI.pdf\"\r\n      download>\r\n      Cheat-Sheet\r\n    </a></p>\r\n</div>"

/***/ }),

/***/ "./src/app/environment/environment.component.ts":
/*!******************************************************!*\
  !*** ./src/app/environment/environment.component.ts ***!
  \******************************************************/
/*! exports provided: EnvironmentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EnvironmentComponent", function() { return EnvironmentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var EnvironmentComponent = /** @class */ (function () {
    function EnvironmentComponent(service) {
        this.service = service;
    }
    EnvironmentComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    EnvironmentComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    EnvironmentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-environment',
            template: __webpack_require__(/*! ./environment.component.html */ "./src/app/environment/environment.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], EnvironmentComponent);
    return EnvironmentComponent;
}());



/***/ }),

/***/ "./src/app/finish-app/finish-app.component.html":
/*!******************************************************!*\
  !*** ./src/app/finish-app/finish-app.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>Finish the Application</h2>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\r\n  <h5>User Story</h5>\r\n  <p>As a <b>user</b><br />\r\n    I want to <b>display the very next lecture on the front page</b>, <br />\r\n    to <b> see immediately where to go next when I open the app</b>.</p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-top: 20px;\">\r\n  <p>This chapter doesn't contain any more theory learning units.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Start page</h4>\r\n  <p>There is still one page empty: the start page. On this page we want to see our next lecture and only the next one\r\n    of the day. So first we need to prepare the <b>where-to-go.component.ts</b>. We are going to need the\r\n    <code style=\"font-family:'Consolas';\">LectureService</code>\r\n    injected in the <code style=\"font-family:'Consolas';\">constructor</code> again.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ff8000;\">constructor</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> lectureService</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> LectureService</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#b16565;\">&#125;</span></pre>\r\n  </div>\r\n  <p>Of course we also need to import the class <code style=\"font-family:'Consolas';\">Lecture</code>.</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LectureService </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture.service&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n\r\n  <p>Then we need the <code style=\"font-family:'Consolas';\">Date</code> of today. This <code\r\n      style=\"font-family:'Consolas';\">Date</code> will tell us all we need to know: the day of\r\n    the week and the time, because we want to compare the day and time of today with the day and time of the lectures\r\n    in the timetable to find the very next lecture to display. We need an array of <code\r\n      style=\"font-family:'Consolas';\">Lecture[]</code>, a\r\n    <code style=\"font-family:'Consolas';\">Lecture</code> variable to save the next lecture with, a <code\r\n      style=\"font-family:'Consolas';\">Boolean</code> that will save if there still\r\n    is a lecture today and a <code style=\"font-family:'Consolas';\">Lecture</code> object with initialised start values.\r\n    We will need this to compare all objects in the timetable with this <code style=\"font-family:'Consolas';\">Lecture</code> object and we\r\n    overwrite it every time, a lecture is closer to the time right now than the saved lecture before.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">lectures</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#008000;\">[]</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#ffffff;\">nextLecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#ffffff;\">localTime</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff4848;\">Date </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">new </span><span style=\"color:#ff4848;\">Date</span><span style=\"color:#b16565;\">();\r\n</span><span style=\"color:#ffffff;\">isThereANextLecture</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff4848;\">Boolean </span><span style=\"color:#008000;\">= </span><span style=\"color:#359aff;\">false</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#ffffff;\">tempLecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#008000;\">= </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#ffffff;\">id</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">99</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">name</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;Dummy&#39;</span><span style=\"color:#b16565;\">,\r\n</span><span style=\"color:#ffffff;\">  room</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;0&#39;</span><span style=\"color:#b16565;\">,\r\n</span><span style=\"color:#ffffff;\">  day</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.getWeekday</span><span style=\"color:#b16565;\">(),\r\n</span><span style=\"color:#ffffff;\">  time</span><span style=\"color:#008000;\">: </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> hours</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">20</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> minutes</span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">15 </span><span style=\"color:#b16565;\">&#125;,\r\n</span><span style=\"color:#ffffff;\">  building</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffff80;\">&#39;WE5&#39;</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">floor</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;0&#39;\r\n</span><span style=\"color:#b16565;\">&#125;;</span></pre>\r\n  </div>\r\n  <p>Of course we also need to import the class <code style=\"font-family:'Consolas';\">Lecture</code>.</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n\r\n  <p>We will also have the <code style=\"font-family:'Consolas';\">getLectures()</code> method that we call in <code\r\n      style=\"font-family:'Consolas';\">ngOnInit()</code>.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">ngOnInit</span><span style=\"color:#b16565;\">() </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.getLectures</span><span style=\"color:#b16565;\">();\r\n&#125;\r\n\r\n</span><span style=\"color:#ffffff;\">getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.getLectures</span><span style=\"color:#b16565;\">()\r\n</span><span style=\"color:#ffffff;\">  .subscribe</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lectures </span><span style=\"color:#008000;\">=&gt; </span><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> lectures</span><span style=\"color:#b16565;\">; </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.getNextLecture</span><span style=\"color:#b16565;\">() </span><span style=\"color:#b16565;\">&#125;);\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>With the method <code style=\"font-family:'Consolas';\">getDay()</code> we will get the weekday of today as a number.\r\n    0 is sunday, 1 is monday and\r\n    so on. But we need them as strings. We pick the one string from an array of strings whose index is the same\r\n    number as todays number.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getWeekday</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">var</span><span style=\"color:#ffffff;\"> days </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[</span><span style=\"color:#ffff80;\">&#39;Sunday&#39;</span><span style=\"color:#b16565;\">, </span><span style=\"color:#ffff80;\">&#39;Monday&#39;</span><span style=\"color:#b16565;\">, </span><span style=\"color:#ffff80;\">&#39;Tuesday&#39;</span><span style=\"color:#b16565;\">, \r\n  </span><span style=\"color:#ffff80;\">&#39;Wednesday&#39;</span><span style=\"color:#b16565;\">, </span><span style=\"color:#ffff80;\">&#39;Thursday&#39;</span><span style=\"color:#b16565;\">, </span><span style=\"color:#ffff80;\">&#39;Friday&#39;</span><span style=\"color:#b16565;\">, </span><span style=\"color:#ffff80;\">&#39;Saturday&#39;</span><span style=\"color:#008000;\">]</span><span style=\"color:#b16565;\">;\r\n  </span><span style=\"color:#359aff;\">return</span><span style=\"color:#ffffff;\"> days</span><span style=\"color:#008000;\">[</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.localTime.</span><span style=\"color:#ff8000;\">getDay</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">]</span><span style=\"color:#b16565;\">;\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>Now it's time for the function, that will return the correct next lecture for us.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getNextLecture</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n</span><span style=\"color:#ffffff;\">  let tempArray</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff4848;\">Array</span><span style=\"color:#ffffff;\">&lt;Lecture&gt; </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[]</span><span style=\"color:#b16565;\">;\r\n  </span><span style=\"color:#359aff;\">for </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">let lecture of </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#359aff;\">if </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture.day </span><span style=\"color:#008000;\">=== </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.getWeekday</span><span style=\"color:#b16565;\">()) </span><span style=\"color:#b16565;\">&#123;\r\n      </span><span style=\"color:#359aff;\">if </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture.time.hours </span><span style=\"color:#008000;\">&gt;= </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.localTime.</span><span style=\"color:#ff8000;\">getHours</span><span style=\"color:#b16565;\">()) </span><span style=\"color:#b16565;\">&#123;\r\n</span><span style=\"color:#ffffff;\">        tempArray.</span><span style=\"color:#ff8000;\">push</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#b16565;\">);\r\n      </span><span style=\"color:#b16565;\">&#125;\r\n    </span><span style=\"color:#b16565;\">&#125;\r\n    </span><span style=\"color:#359aff;\">for </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">let t of tempArray</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123;\r\n      </span><span style=\"color:#359aff;\">if </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">t.time.hours </span><span style=\"color:#008000;\">&lt; </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.tempLecture.time.hours</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123;\r\n        </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.tempLecture </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> t</span><span style=\"color:#b16565;\">;\r\n        </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.isThereANextLecture </span><span style=\"color:#008000;\">= </span><span style=\"color:#359aff;\">true</span><span style=\"color:#b16565;\">;\r\n      </span><span style=\"color:#b16565;\">&#125;\r\n    </span><span style=\"color:#b16565;\">&#125;\r\n    </span><span style=\"color:#359aff;\">if </span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.isThereANextLecture</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123;\r\n      </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.nextLecture </span><span style=\"color:#008000;\">= </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.tempLecture</span><span style=\"color:#b16565;\">;\r\n    </span><span style=\"color:#b16565;\">&#125;\r\n  </span><span style=\"color:#b16565;\">&#125;\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>There is an empty array, we go through all lectures in the lecture array and if the day is today, we check if the\r\n    hour is greater than or equal with the hour right now. If so we put this lecture in the prepared array. In the\r\n    second step the function compares all lectures in the <code style=\"font-family:'Consolas';\">tempArray</code> with\r\n    each other and saves the smallest\r\n    one, which means the one that is closest to the time right now and sets the boolean <code\r\n      style=\"font-family:'Consolas';\">true</code>. We could do\r\n    the same thing with the minutes, but you can't be at two lectures at the same time, so this is fine now.</p>\r\n  <p>The last step is to display it via the HTML code. If we have a <code\r\n      style=\"font-family:'Consolas';\">nextLecture</code>, we want to see the\r\n    <code style=\"font-family:'Consolas';\">nextLecture</code>s' building, floor, room, day,time and name. If there is no\r\n    <code style=\"font-family:'Consolas';\">nextLecture</code>, we\r\n    want to display the text \"No events today!\"</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin: </span><span style=\"color:#00ff40;\">30px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;nextLecture&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui info message&quot;\r\n    </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;width: </span><span style=\"color:#00ff40;\">50</span><span style=\"color:#ffffff;\">%</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\"> margin-left: </span><span style=\"color:#00ff40;\">25</span><span style=\"color:#ffffff;\">%&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;header&quot;</span><span style=\"color:#359aff;\">&gt;\r\n  </span><span style=\"color:#ffffff;\">      You need to be in\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;header&quot;</span><span style=\"color:#359aff;\">&gt;\r\n  </span><span style=\"color:#ffffff;\">      <span>{{</span>nextLecture.building<span>}}</span>/<span>{{</span>nextLecture.floor<span>}}</span>\r\n      .<span>{{</span>nextLecture.room<span>}}</span>\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;text-align: center</span><span style=\"color:#ff8000;\">;\r\n  </span><span style=\"color:#ffffff;\">      list-style-type: none</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;list&quot;</span><span style=\"color:#359aff;\">&gt;\r\n      </span><span style=\"color:#359aff;\">&lt;p&gt;</span><span style=\"color:#ffffff;\">At <span>{{</span>nextLecture.day<span>}}</span>, <span>{{</span>nextLecture.time.hours<span>}}</span>\r\n      :<span>{{</span>nextLecture.time.minutes<span>}}</span></span><span style=\"color:#359aff;\">&lt;/p&gt;\r\n      </span><span style=\"color:#359aff;\">&lt;p&gt;</span><span style=\"color:#ffffff;\">For <span>{{</span>nextLecture.name<span>}}</span></span><span style=\"color:#359aff;\">&lt;/p&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;!nextLecture&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui info message&quot;\r\n    </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;width: </span><span style=\"color:#00ff40;\">50</span><span style=\"color:#ffffff;\">%</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\"> margin-left: </span><span style=\"color:#00ff40;\">25</span><span style=\"color:#ffffff;\">%&quot;</span><span style=\"color:#359aff;\">&gt;\r\n  </span><span style=\"color:#ffffff;\">    No events today!\r\n  </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n&lt;/div&gt;</span></pre>\r\n  </div>\r\n  <h4>Visualization of the Construction:</h4>\r\n  (No changes here)\r\n  <p><img class=\"ui image big centered\" src=\"assets/img/App-Building-9.png\"></p>\r\n  <div class=\"ui success message\">\r\n    <h4>Summary</h4>\r\n    <ul>\r\n      <li>Nothing in this chapter should be new for you.</li>\r\n      <li>You displayed the next lecture of the day on the start page of the application.</li>\r\n      <li>You have learned alot, be proud of yourself!</li>\r\n    </ul>\r\n  </div>\r\n  <h4>Congratulations! This is your result:</h4>\r\n  <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\r\n    src=\"https://stackblitz.com/edit/where-to-go-step-8?embed=1&file=src/app/where-to-go/where-to-go.component.ts&hideNavigation=1\"></iframe>\r\n\r\n  <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\r\n    <h4>Your Progress:</h4>\r\n    <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"100\"></mat-progress-bar>\r\n  </div>\r\n\r\n</div>"

/***/ }),

/***/ "./src/app/finish-app/finish-app.component.ts":
/*!****************************************************!*\
  !*** ./src/app/finish-app/finish-app.component.ts ***!
  \****************************************************/
/*! exports provided: FinishAppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FinishAppComponent", function() { return FinishAppComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var FinishAppComponent = /** @class */ (function () {
    function FinishAppComponent(service) {
        this.service = service;
    }
    FinishAppComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    FinishAppComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    FinishAppComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-finish-app',
            template: __webpack_require__(/*! ./finish-app.component.html */ "./src/app/finish-app/finish-app.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], FinishAppComponent);
    return FinishAppComponent;
}());



/***/ }),

/***/ "./src/app/first-app/first-app.component.html":
/*!****************************************************!*\
  !*** ./src/app/first-app/first-app.component.html ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>My first Angular-App:</h2>\n<div>\n  <h4>Let's start</h4>\n  <p>First open your command line and type:\n  </p>\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">ng new my-first-app</code></p>\n  <p>You will get the question \"<code style=\"font-family:'Consolas';\">? Would you like to add Angular routing?</code>\". Answer it with \"Yes\"! \n    In the next step you can choose which stylesheet format you would like to use. In this tutorial we use CSS.</p>\n  <img style=\"margin-bottom:15px;\" class=\"ui centered large image\" src=\"assets/img/New-Project.png\">\n  <p> A project which includes all files and folders will be created.</p>\n  <p>These are:</p>\n  <ul>\n    <li>The new workspace with the root folder \"my-first-app\".</li>\n    <li>An initial skeleton app project, also called \"my-first-app\" which you will find it in the subfolder \"src\".\n    </li>\n    <li> An end-to-end test project in the subfolder \"e2e\".\n    </li>\n    <li>Related configuration files.</li>\n  </ul>\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">cd my-first-app</code></p>\n  <p>Then you can navigate to that project-folder. If you get an answer like this from your system: \"<code\n      style=\"font-family:'Consolas';\">added 1098 packages from 1166 contributors and audited 39144 packages in 35.242s\n      <span class=\"bold\">found 3 vulnerabilities (2 low, 1 high)</span></code>\", just follow the instructions on your command\n    line (<code style=\"font-family:'Consolas';\">npm audit fix</code> or similar) and it will be fine.</p>\n  <p class=\"ui black message\"> <code style=\"font-family:'Consolas';\">ng serve --open</code></p>\n  <p>With \"serve\" you can already run the application and \"--open\" opens the browser directly on <a\n      href=\"http://localhost:4200/\">http://localhost:4200/</a>\n    and shows your brand new application.\n  </p>\n  <h4>First things first</h4>\n  <p>Before we start our big project, we need to know some things about <a routerLink=\"/typescript\">TypeScript</a> in\n    general.</p>\n</div>"

/***/ }),

/***/ "./src/app/first-app/first-app.component.ts":
/*!**************************************************!*\
  !*** ./src/app/first-app/first-app.component.ts ***!
  \**************************************************/
/*! exports provided: FirstAppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FirstAppComponent", function() { return FirstAppComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var FirstAppComponent = /** @class */ (function () {
    function FirstAppComponent(service) {
        this.service = service;
    }
    FirstAppComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    FirstAppComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    FirstAppComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-first-app',
            template: __webpack_require__(/*! ./first-app.component.html */ "./src/app/first-app/first-app.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], FirstAppComponent);
    return FirstAppComponent;
}());



/***/ }),

/***/ "./src/app/home/home.component.html":
/*!******************************************!*\
  !*** ./src/app/home/home.component.html ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"ui three column grid\" style=\"text-align: center\">\n  <div class=\"column\">\n    <div class=\"ui fluid card\">\n      <a class=\"image\" (click)=\"theorist()\" routerLink=\"/environment\">\n        <img src=\"assets/img/Icons-01.png\">\n      </a>\n      <div class=\"content\">\n        <a class=\"header\" (click)=\"theorist()\" routerLink=\"/environment\">Theorist</a>\n      </div>\n    </div>\n  </div>\n  <div class=\"column\">\n    <div class=\"ui fluid card\">\n      <a class=\"image\" (click)=\"practitioner()\" routerLink=\"/environment\">\n        <img src=\"assets/img/Icons-02.png\">\n      </a>\n      <div class=\"content\">\n        <a class=\"header\" (click)=\"practitioner()\" routerLink=\"/environment\">Practitioner</a>\n      </div>\n    </div>\n  </div>\n  <div class=\"column\">\n    <div class=\"ui fluid card\">\n      <a class=\"image\" (click)=\"both()\" routerLink=\"/environment\">\n        <img src=\"assets/img/Icons-03.png\">\n      </a>\n      <div class=\"content\">\n        <a class=\"header\" (click)=\"both()\" routerLink=\"/environment\">Both</a>\n      </div>\n    </div>\n  </div>\n</div>\n<h2 style=\"text-align: center;\">Who are you?</h2>\n<div style=\"margin: 30px;\" class=\"ui message\">\n  <p>If you just want to read some theory parts about Angular, choose the theorist. If you just want to see how to code\n    Angular,\n    choose the practitioner. If you want to have it all, choose both.</p>\n  <p><b>Recommendation</b>: Choose \"Both\"! You will find a visual difference between theory and practice and you will\n    have everything you may interestend in on every page.</p>\n</div>\n\n"

/***/ }),

/***/ "./src/app/home/home.component.ts":
/*!****************************************!*\
  !*** ./src/app/home/home.component.ts ***!
  \****************************************/
/*! exports provided: HomeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomeComponent", function() { return HomeComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var HomeComponent = /** @class */ (function () {
    function HomeComponent(service) {
        this.service = service;
    }
    HomeComponent.prototype.ngOnInit = function () {
        this.getModi();
    };
    HomeComponent.prototype.getModi = function () {
        var _this = this;
        this.service.getModi()
            .subscribe(function (modi) { return _this.modi = modi; });
    };
    HomeComponent.prototype.theorist = function () {
        var _this = this;
        this.service.setModus(this.modi[0])
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    HomeComponent.prototype.practitioner = function () {
        var _this = this;
        this.service.setModus(this.modi[1])
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    HomeComponent.prototype.both = function () {
        var _this = this;
        this.service.setModus(this.modi[2])
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    HomeComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-home',
            template: __webpack_require__(/*! ./home.component.html */ "./src/app/home/home.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], HomeComponent);
    return HomeComponent;
}());



/***/ }),

/***/ "./src/app/http/http.component.html":
/*!******************************************!*\
  !*** ./src/app/http/http.component.html ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>HTTP</h2>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\r\n  <h5>User Story</h5>\r\n  <p>As a <b>user</b><br />\r\n    I want to <b>add, change and delete lectures</b>, <br />\r\n    to <b> keep my timetable up-to-date</b>.</p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-bottom: 20px;\" class=\"ui message\">\r\n  <h4>Http</h4>\r\n  <p>\r\n    Most front-end applications interact with the backend over HTTP protocol. In fact, every application loads data at\r\n    runtime. Different patterns can be used. Angular uses the RxJS-Framework, that is based on the observable pattern.\r\n    The Angular class <code style=\"font-family:'Consolas';\">Http</code> implements this pattern and provides an\r\n    interface, where you can load data\r\n    asynchonous.\r\n  </p>\r\n  <p>Often web-applications use REST server. They use http methods to define actions, e.g. which action should the server\r\n    run for the specific resource.</p>\r\n  <ul>\r\n    <li>GET: is used to request a resource from the server, e.g. a list with items</li>\r\n    <li>POST: to add a new resource or update an existing one, e.g. adds or updates an item of that list</li>\r\n    <li>PUT: replaces an existing resource, e.g. replaces one item or one list with another item or list</li>\r\n    <li>DELETE: deletes a resource by the sent id</li>\r\n  </ul>\r\n  <p>The term \"resource\" refers to a single data object of a REST server. The path of the request tells the\r\n    server which resource to do an action on. For example you can make a request for a list with the path\r\n    <code style=\"font-family:'Consolas';\">/list</code> and the method <code style=\"font-family:'Consolas';\">GET</code>.\r\n    And with the path <code style=\"font-family:'Consolas';\">/list/1234</code> you could request the\r\n    list-item 1234.</p>\r\n  <h4>Observables</h4>\r\n  <p>Reactive programing is a programing paradigm. It's about data streams. As an example calculation tables in MS\r\n    Excel can be used. It is not about Excel, it's about the table. If you have cells in the table connected by a\r\n    formula and you change a value in a connected cell, the outcome of the formula will be updated automatically.\r\n    Angular supports reactive programing with the RxJS-Framework. Observables are the main construct of the RxJS\r\n    library. Observables represent a data stream supplied by a source. They have the following tasks:</p>\r\n  <ul>\r\n    <li>Generate data</li>\r\n    <li>Allow the use of operators, to manipulate data</li>\r\n    <li>Release storage, if data stream is no longer needed</li>\r\n  </ul>\r\n  <p> <code style=\"font-family:'Consolas';\">subscribe</code>-method: it's used to listen and react to signals of the\r\n    observable. The signature could\r\n    look like this:\r\n    <code style=\"font-family:'Consolas';\">obs.subscribe((data) => &#123;...&#125;);</code></p>\r\n  <p><code style=\"font-family:'Consolas';\">pipe</code>-method: chains the operators of observables. The method gets null\r\n    or more operators and returns\r\n    an observable.\r\n    The data of the returned observable have the same type as they have in the last operator</p>\r\n  <ul>\r\n    <li><code style=\"font-family:'Consolas';\">map</code>-operator: gets an observable internally, gives the data of the\r\n      observable to the transformation\r\n      function,\r\n      gets the return value and puts it in an observable. This new observable is forwarded to the next operator</li>\r\n    <li><code style=\"font-family:'Consolas';\">mapTo</code>-operator: forwards a static value</li>\r\n    <li><code style=\"font-family:'Consolas';\">tap</code>-operator: is used for side-effects. Can be used to print the\r\n      data stream on the console, or to\r\n      save data from the server in a property</li>\r\n    <li><code style=\"font-family:'Consolas';\">catchError</code>-operator: is comparable to the <code\r\n        style=\"font-family:'Consolas';\">catch</code> of a <code style=\"font-family:'Consolas';\">try/catch</code>-block.\r\n      It\r\n      gets an error, handles the error and returns a new observable or a new error-observable for the next\r\n      <code style=\"font-family:'Consolas';\">catchError</code>-operator</li>\r\n    <li><code style=\"font-family:'Consolas';\">of</code>-operator: creates a new observable from a static value</li>\r\n    <li><code style=\"font-family:'Consolas';\">throwError</code>-operator: creates a new error-observable. It's similar\r\n      to the <code style=\"font-family:'Consolas';\">throw</code>\r\n      command</li>\r\n  </ul>\r\n  <h4>Http-Module</h4>\r\n  <p>The http-module contains three Angular modules: <code\r\n      style=\"font-family:'Consolas';\"> HttpClientModule, HttpClientJsonpModule</code> and\r\n    <code style=\"font-family:'Consolas';\">HttpClientXsrfModule</code>. The most important classes of the http-module\r\n    are:</p>\r\n  <ul>\r\n    <li><code style=\"font-family:'Consolas';\">HttpHeaders</code>: helps you to define and manipulate the http-headers of\r\n      a server request</li>\r\n    <li><code style=\"font-family:'Consolas';\">HttpParams</code>: helps you to define and manipulate the request\r\n      parameter of a server request</li>\r\n    <li><code style=\"font-family:'Consolas';\">HttpRequest</code>: represents server requests. An instance of this class\r\n      contains URL and http-headers\r\n      for\r\n      the request. You don't assign instances of this class, Angular will do this internally.</li>\r\n    <li><code style=\"font-family:'Consolas';\">HttpResponse</code>: represents an answer from the server. It contains for\r\n      example the status, the server\r\n      has for the request and the data the server sends.</li>\r\n    <li><code style=\"font-family:'Consolas';\">HttpErrorResponse</code>: represents an error-answer from the server. The\r\n      answer of the server fails when\r\n      the connection fails, when an exception is in your code or when the server status code is bigger or equals 400.\r\n    </li>\r\n  </ul>\r\n  <p>We will work with the <code style=\"font-family:'Consolas';\">HttpClientModule</code>. It provides the <code\r\n      style=\"font-family:'Consolas';\">HttpClient</code> service. All methods\r\n    of the <code style=\"font-family:'Consolas';\">HttpClient</code> service return observables and use json data. The use\r\n    of json data means that Angular\r\n    serializes and deserializes the data for you.</p>\r\n</div>\r\n<h4>Using a Data Server</h4>\r\n<div *ngIf=\"theorySmall\" style=\"margin-bottom: 20px;\" class=\"ui message\">\r\n  <p>The service class should get the data now with HTTP requests. We want to add functions:</p>\r\n  <ul>\r\n    <li><b>C</b>reate for adding new lectures</li>\r\n    <li><b>R</b>ead (we already have that)</li>\r\n    <li><b>U</b>pdate for changing a lecture item</li>\r\n    <li><b>D</b>elete for deleting a lecture item or all of them</li>\r\n  </ul>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>Import this in <b>app.module.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> HttpClientModule </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/common/http&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <p>And add it to the <code style=\"font-family:'Consolas';\">imports</code> array:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">imports</span><span style=\"color:#008000;\">: </span><span style=\"color:#008000;\">[\r\n  </span><span style=\"color:#ffffff;\">  ...</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">  HttpClientModule\r\n</span><span style=\"color:#008000;\">]</span><span style=\"color:#b16565;\">, </span></pre>\r\n  </div>\r\n  <p>The In-Memory Web API Module will be used. It imitates the communication with a remote data server. First install\r\n    the npm package and generate the InMemoryData-Service:</p>\r\n  <p class=\"ui message black\"> <code style=\"font-family:'Consolas';\">npm install angular-in-memory-web-api --save</code>\r\n  </p>\r\n  <p class=\"ui message black\"> <code style=\"font-family:'Consolas';\">ng g service shared/InMemoryData</code></p>\r\n  <p>Import to <b>app.module.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> HttpClientInMemoryWebApiModule </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;angular-in-memory-web-api&#39;<span style=\"color:#b16565;\">; </span>\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> InMemoryDataService </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;./shared/in-memory-data.service&#39;</span><span style=\"color:#b16565;\">; </span></pre>\r\n  </div>\r\n  <p>And you also need to add it to the <code style=\"font-family:'Consolas';\">imports</code> array:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">imports</span><span style=\"color:#008000;\">: </span><span style=\"color:#008000;\">[\r\n  </span><span style=\"color:#ffffff;\">  ...</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">  HttpClientModule</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#ffffff;\">  HttpClientInMemoryWebApiModule.forRoot</span><span style=\"color:#b16565;\">(\r\n  </span><span style=\"color:#ffffff;\">  InMemoryDataService</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> dataEncapsulation</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">false </span><span style=\"color:#b16565;\">&#125;)\r\n</span><span style=\"color:#008000;\">]</span><span style=\"color:#b16565;\">,</span></pre>\r\n\r\n  </div>\r\n  <p>If you have this problem, don't worry, we will fix it now.\r\n  </p>\r\n  <img style=\"margin-bottom:15px;\" class=\"ui centered large image\" src=\"assets/img/InMemoryData-Error.png\">\r\n  <p>The class <code style=\"font-family:'Consolas';\"><b>InMemoryDataService</b></code> needs to implement <code\r\n      style=\"font-family:'Consolas';\">InMemoryDbService</code> and the\r\n    property\r\n    <code style=\"font-family:'Consolas';\">createDb</code> is missing.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">export </span><span style=\"color:#359aff;\">class</span><span style=\"color:#ffffff;\"> InMemoryDataService </span><span style=\"color:#359aff;\">implements</span><span style=\"color:#ffffff;\"> InMemoryDbService </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#ffffff;\">  createDb</span><span style=\"color:#b16565;\">() </span><span style=\"color:#b16565;\">&#123;\r\n      </span><span style=\"color:#359aff;\">const</span><span style=\"color:#ffffff;\"> lectures </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[]</span><span style=\"color:#b16565;\">;\r\n      </span><span style=\"color:#359aff;\">return </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\">lectures</span><span style=\"color:#b16565;\">&#125;;\r\n    </span><span style=\"color:#b16565;\">&#125;\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>therefore you need to import:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> InMemoryDbService </span><span style=\"color:#b16565;\">&#125; </span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;angular-in-memory-web-api&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <p>Now we need to fill the <code style=\"font-family:'Consolas';\">const lectures</code> with the data we have in <code\r\n      style=\"font-family:'Consolas';\">mock-lectures.ts</code>.</p>\r\n  <p>To be sure every new lecture will have an unique id we add the method <code\r\n      style=\"font-family:'Consolas';\">genId()</code>. If the array is\r\n    empty the initial id 11 will be used, otherwise the highest id + 1 will be used.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">genId</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lectures</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#008000;\">[]</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return</span><span style=\"color:#ffffff;\"> lectures.</span><span style=\"color:#ff8000;\">length </span><span style=\"color:#008000;\">&gt; </span><span style=\"color:#00ff40;\">0 </span><span style=\"color:#008000;\">? </span><span style=\"color:#ff4848;\">Math</span><span style=\"color:#ffffff;\">.</span><span style=\"color:#ff8000;\">max</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">...lectures\r\n  .map</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture </span><span style=\"color:#008000;\">=&gt;</span><span style=\"color:#ffffff;\"> lecture.</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#b16565;\">)) </span><span style=\"color:#008000;\">+ </span><span style=\"color:#00ff40;\">1 </span><span style=\"color:#008000;\">: </span><span style=\"color:#00ff40;\">11</span><span style=\"color:#b16565;\">;\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>Of course we also need to import the class <code style=\"font-family:'Consolas';\">Lecture</code>.</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;./lecture&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n\r\n  <h4>Update the Getter</h4>\r\n  <p>To get the data from the remote server now, we need to update the getter-methods for the lecture array and the\r\n    single lecture item. First we define in <b>lecture.service.ts</b> the <code\r\n      style=\"font-family:'Consolas';\">lectureUrl</code> of the form\r\n    <code style=\"font-family:'Consolas';\">:base/:collectionName</code> with the address of the lecture resource on the\r\n    server. Here base is the\r\n    resource to which requests are made, and <code style=\"font-family:'Consolas';\">collectionName</code> is the lectures\r\n    data object in the\r\n    in-memory-data-service.ts.</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> lectureUrl </span><span style=\"color:#008000;\">= </span><span style=\"color:#ffff80;\">&#39;api/lectures&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <p>Injection into the constructor:</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ff8000;\">constructor</span><span style=\"color:#b16565;\">( </span><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> http</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> HttpClient </span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#b16565;\">&#125;</span></pre>\r\n  </div>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> HttpClient </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/common/http&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <p>And now change the getter:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;Lecture</span><span style=\"color:#008000;\">[]&gt; </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.http.</span><span style=\"color:#ff8000;\">get</span><span style=\"color:#ffffff;\">&lt;Lecture</span><span style=\"color:#008000;\">[]&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureUrl</span><span style=\"color:#b16565;\">)\r\n&#125; </span></pre>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>All HttpClient methods return a RxJS-Observable of something. HTTP is a request / response protocol. Every time\r\n    you make a request you will get a single response. </p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>There might go something wrong with the data of the remote\r\n    server sometimes, that's why <code style=\"font-family:'Consolas';\">getLectures()</code> should catch an error and do\r\n    something appropriate with it.\r\n    So we need a method for that:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> handleError&lt;T&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">operation </span><span style=\"color:#008000;\">= </span><span style=\"color:#ffff80;\">&#39;operation&#39;</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> result</span><span style=\"color:#008000;\">?:</span><span style=\"color:#ffffff;\"> T</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">error</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> any</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;T&gt; </span><span style=\"color:#008000;\">=&gt; </span><span style=\"color:#b16565;\">&#123;\r\n</span><span style=\"color:#ffffff;\">   console.</span><span style=\"color:#ff8000;\">log</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">operation </span><span style=\"color:#008000;\">+ </span><span style=\"color:#ffff80;\">&#39; failed: &#39; </span><span style=\"color:#008000;\">+</span><span style=\"color:#ffffff;\"> error</span><span style=\"color:#b16565;\">);\r\n    </span><span style=\"color:#359aff;\">return</span><span style=\"color:#ffffff;\"> of </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">result as T</span><span style=\"color:#b16565;\">);\r\n  </span><span style=\"color:#b16565;\">&#125;\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>If something goes wrong now the error will be logged on the console. In addition the method will return a safe\r\n    value, that will keep the application running. The next step is to import <code\r\n      style=\"font-family:'Consolas';\">catchError</code> and add it to the\r\n    get method.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> catchError</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> map</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> tap </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;rxjs/operators&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;Lecture</span><span style=\"color:#008000;\">[]&gt; </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.http.</span><span style=\"color:#ff8000;\">get</span><span style=\"color:#ffffff;\">&lt;Lecture</span><span style=\"color:#008000;\">[]&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureUrl</span><span style=\"color:#b16565;\">)\r\n</span><span style=\"color:#ffffff;\">  .pipe</span><span style=\"color:#b16565;\">(\r\n</span><span style=\"color:#ffffff;\">   catchError</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.handleError</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffff80;\">&#39;getLectures&#39;</span><span style=\"color:#b16565;\">, </span><span style=\"color:#008000;\">[]</span><span style=\"color:#b16565;\">))\r\n  </span><span style=\"color:#b16565;\">);\r\n&#125;</span></pre>\r\n  </div>\r\n  <p class=\"ui info message\"><code style=\"font-family:'Consolas';\">get</code>\r\n    <br />Retrieve information.\r\n  </p>\r\n\r\n  <p>We also need to change the getter method for the single lecture:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;Lecture&gt; </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">const</span><span style=\"color:#ffffff;\"> url </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> `$</span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureUrl</span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#008000;\">/$</span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\">`</span><span style=\"color:#b16565;\">;\r\n  </span><span style=\"color:#359aff;\">return </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.http.</span><span style=\"color:#ff8000;\">get</span><span style=\"color:#ffffff;\">&lt;Lecture&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">url</span><span style=\"color:#b16565;\">)\r\n</span><span style=\"color:#ffffff;\">  .pipe</span><span style=\"color:#b16565;\">(\r\n</span><span style=\"color:#ffffff;\">   catchError</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.handleError&lt;Lecture&gt;\r\n    </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">`getLecture </span><span style=\"color:#ff8000;\">id</span><span style=\"color:#008000;\">=$</span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\">`</span><span style=\"color:#b16565;\">))\r\n  </span><span style=\"color:#b16565;\">);\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>The <code style=\"font-family:'Consolas';\">const url</code> is defined as :baseURL/:id so that the url is returned\r\n    with id and is retrieved from\r\n    the\r\n    server with <code style=\"font-family:'Consolas';\">http.get()</code>.</p>\r\n  <p>With these steps the class mock-lectures.ts is useless now. You are safe to delete the class and also its import\r\n    to lecture.service.ts.</p>\r\n  <h4>Change Lecture Details</h4>\r\n  <p>We want to be able to change something in the details of a lecture. In the detail view we can display our lecture\r\n    in a form, but we need to write the changes on the server, if we want to have them permanent. We need to prepare a\r\n    function in <b>lecture.service.ts</b>.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> HttpHeaders </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/common/http&#39;</span><span style=\"color:#b16565;\">;\r\n\r\n</span><span style=\"color:#359aff;\">const</span><span style=\"color:#ffffff;\"> httpOptions </span><span style=\"color:#008000;\">= </span><span style=\"color:#b16565;\">&#123;\r\n</span><span style=\"color:#ffffff;\">headers</span><span style=\"color:#008000;\">: </span><span style=\"color:#008000;\">new</span><span style=\"color:#ffffff;\"> HttpHeaders </span><span style=\"color:#b16565;\">(&#123; </span><span style=\"color:#ffff80;\">&#39;Content-Type&#39;</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;application/json&#39;</span><span style=\"color:#b16565;\">&#125;) </span><span style=\"color:#b16565;\">&#125;</span></pre>\r\n  </div>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">updateLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;any&gt; </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.http.put</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureUrl</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> lecture</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> httpOptions</span><span style=\"color:#b16565;\">)\r\n</span><span style=\"color:#ffffff;\">  .pipe</span><span style=\"color:#b16565;\">(\r\n</span><span style=\"color:#ffffff;\">   catchError</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.handleError&lt;any&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffff80;\">&#39;updateLecture&#39;</span><span style=\"color:#b16565;\">))\r\n  </span><span style=\"color:#b16565;\">);\r\n&#125;</span></pre>\r\n  </div>\r\n  <p class=\"ui info message\"><code style=\"font-family:'Consolas';\">put</code>\r\n    <br />Store an entity at a URI. PUT can create a new entity or update an existing one.\r\n  </p>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>The method <code style=\"font-family:'Consolas';\">HttpClient.put()</code> needs three parameters: </p>\r\n  <ul>\r\n    <li>URL: the url has not changed. The Web-API knows what lecture to update, because of the id</li>\r\n    <li>the data that should be updated</li>\r\n    <li>options: the Web-API expects a special header in the storage requirements of HTTP. This header is defined in the\r\n      LectureService as the constant <code style=\"font-family:'Consolas';\">httpOptions</code>.</li>\r\n  </ul>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>Use the method from the service now to write a <code style=\"font-family:'Consolas';\">save()</code> method in\r\n    <b>lecture-details.component.ts</b>.\r\n  </p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">save</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.updateLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lecture</span><span style=\"color:#b16565;\">)\r\n</span><span style=\"color:#ffffff;\">  .subscribe</span><span style=\"color:#b16565;\">(() </span><span style=\"color:#008000;\">=&gt; </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.goBack</span><span style=\"color:#b16565;\">());\r\n&#125; </span></pre>\r\n  </div>\r\n  <p>Afterwards you can add the button in <b>lecture-details.component.html</b> with the click-event-binding and check\r\n    if all input fields are filled.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;button </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui primary button&quot; (click)</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;save()&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Save</span><span style=\"color:#359aff;\">&lt;/button&gt;\r\n&lt;p </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;color:red&quot; *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;!lecture.name || !lecture.room ||\r\n    !lecture.day || !lecture.time.hours || !lecture.time.minutes \r\n    || !lecture.building || !lecture.floor&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Please check again, \r\n    if you filled all input fields correctly!</span><span style=\"color:#359aff;\">&lt;/p&gt; </span></pre>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Add a new Lecture</h4>\r\n  <p>First we need a new component for the input form:</p>\r\n  <p class=\"ui message black\"><code style=\"font-family:'Consolas';\">ng g component lecture-add</code></p>\r\n  <p>Afterwards we copy the input form from lecture-details.component.html and make the neccessary changes.</p>\r\n  <p>Every time you see something like <code style=\"font-family:'Consolas';\">[(ngModel)]=\"lecture.name\"</code> replace\r\n    it\r\n    with something like\r\n    <code style=\"font-family:'Consolas';\">#lectureName</code>.</p>\r\n  <p class=\"ui info message\">\r\n    Element Reference: Direct access to a DOM-element. Creates a local variable something that provides access to the\r\n    element instance in data-binding and event-binding expressions in the current template. Syntax:<br />\r\n    <code style=\"font-family:'Consolas';\">#something</code>\r\n  </p>\r\n  <p>All of them should look like this example: </p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;input</span><span style=\"color:#ffffff;\"> #lectureName </span><span style=\"color:#ff4848;\">placeholder=</span><span style=\"color:#ffffff;\">&quot;Name&quot; </span><span style=\"color:#359aff;\">/&gt;</span></pre>\r\n  </div>\r\n  <p><b>Important:</b> Delete the <code style=\"font-family:'Consolas';\">*ngIf=\"lecture\"</code> at the beginning!\r\n    Otherwise this component won't\r\n    display anything.</p>\r\n  <p>Call the button below \"Add\" and delete the function, we need to write one first.\r\n  </p>\r\n  <p>In a next step add the component to the routing and to the navigation:</p>\r\n  <p><b>app-routing.module.ts</b></p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LectureAddComponent </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;./lecture-add/lecture-add.component&#39;</span><span style=\"color:#b16565;\">;\r\n\r\n</span><span style=\"color:#359aff;\">const</span><span style=\"color:#ffffff;\"> routes</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Routes </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[\r\n</span><span style=\"color:#ffffff;\">  ...\r\n  </span><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#ff00ff;\">path</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;lecture-add&#39;</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> component</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> LectureAddComponent </span><span style=\"color:#b16565;\">&#125;\r\n</span><span style=\"color:#008000;\">]</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <p><b>app.component.html</b></p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui three item menu&quot;</span><span style=\"color:#359aff;\">&gt;\r\n</span><span style=\"color:#ffffff;\">  ...\r\n  </span><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;item&quot; routerLink</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;/lecture-add&quot; routerLinkActive</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;active&quot;</span><span style=\"color:#359aff;\">&gt;\r\n</span><span style=\"color:#ffffff;\">    Add\r\n  </span><span style=\"color:#359aff;\">&lt;/a&gt;\r\n&lt;/div&gt;</span></pre>\r\n  </div>\r\n  <p>There are also some things we can take over from the details component and the timetable and insert it into\r\n    <b>lecture-add.component.ts</b>,\r\n    so that it looks like this:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LectureService </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture.service&#39;</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture&#39;</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Location </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/common&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">export </span><span style=\"color:#359aff;\">class</span><span style=\"color:#ffffff;\"> LectureAddComponent </span><span style=\"color:#359aff;\">implements</span><span style=\"color:#ffffff;\"> OnInit </span><span style=\"color:#b16565;\">&#123;\r\n</span><span style=\"color:#ffffff;\">  lectures</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#008000;\">[]</span><span style=\"color:#b16565;\">;\r\n\r\n  </span><span style=\"color:#ff8000;\">constructor</span><span style=\"color:#b16565;\">(\r\n    </span><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> lectureService</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> LectureService</span><span style=\"color:#b16565;\">,\r\n    </span><span style=\"color:#359aff;\">private </span><span style=\"color:#ff8000;\">location</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Location\r\n  </span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#b16565;\">&#125;\r\n\r\n</span><span style=\"color:#ffffff;\">  ngOnInit</span><span style=\"color:#b16565;\">() </span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.getLectures</span><span style=\"color:#b16565;\">();\r\n  </span><span style=\"color:#b16565;\">&#125;\r\n\r\n</span><span style=\"color:#ffffff;\">  getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.getLectures</span><span style=\"color:#b16565;\">()\r\n</span><span style=\"color:#ffffff;\">    .subscribe</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lectures </span><span style=\"color:#008000;\">=&gt; </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> lectures</span><span style=\"color:#b16565;\">);\r\n  </span><span style=\"color:#b16565;\">&#125;\r\n\r\n</span><span style=\"color:#ffffff;\">  goBack</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void</span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.</span><span style=\"color:#ff8000;\">location</span><span style=\"color:#ffffff;\">.</span><span style=\"color:#ff8000;\">back</span><span style=\"color:#b16565;\">();\r\n  </span><span style=\"color:#b16565;\">&#125;\r\n\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>Write the <code style=\"font-family:'Consolas';\">addLecture</code> method in the <b>lecture.service.ts</b> now:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">addLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;Lecture&gt; </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.http.post&lt;Lecture&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureUrl</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> lecture</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> httpOptions</span><span style=\"color:#b16565;\">)\r\n</span><span style=\"color:#ffffff;\">  .pipe</span><span style=\"color:#b16565;\">(\r\n</span><span style=\"color:#ffffff;\">    catchError</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.handleError&lt;Lecture&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffff80;\">&#39;addLecture&#39;</span><span style=\"color:#b16565;\">))\r\n  </span><span style=\"color:#b16565;\">);\r\n&#125;</span></pre>\r\n  </div>\r\n  <p class=\"ui info message\"><code style=\"font-family:'Consolas';\">post</code>\r\n    <br/>Often POST is used to create a\r\n    new entity, but it can also be used to update an entity.\r\n  </p>\r\n  <p>We can use it again in the <b>lecture-add.component.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">add</span><span style=\"color:#b16565;\">( </span><span style=\"color:#ffffff;\">name</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> building</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,\r\n</span><span style=\"color:#ffffff;\">floor</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> room</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> day</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> hours</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffffff;\">number</span><span style=\"color:#ffffff;\">, \r\nminutes</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffffff;\">number</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> department</span><span style=\"color:#008000;\">?:</span><span style=\"color:#ffffff;\"> string</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n</span><span style=\"color:#ffffff;\">  let time </span><span style=\"color:#008000;\">= </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\">hours</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> minutes</span><span style=\"color:#b16565;\">&#125;;\r\n  </span><span style=\"color:#359aff;\">if</span><span style=\"color:#b16565;\">(</span><span style=\"color:#008000;\">!</span><span style=\"color:#ffffff;\">name </span><span style=\"color:#008000;\">|| </span><span style=\"color:#008000;\">!</span><span style=\"color:#ffffff;\">room </span><span style=\"color:#008000;\">|| </span><span style=\"color:#008000;\">!</span><span style=\"color:#ffffff;\">day </span><span style=\"color:#008000;\">|| </span><span style=\"color:#008000;\">!</span><span style=\"color:#ffffff;\">time </span><span style=\"color:#008000;\">|| </span><span style=\"color:#008000;\">!</span><span style=\"color:#ffffff;\">building </span><span style=\"color:#008000;\">|| </span><span style=\"color:#008000;\">!</span><span style=\"color:#ffffff;\">floor </span><span style=\"color:#b16565;\">)&#123;\r\n    </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.fieldsEmpty</span><span style=\"color:#008000;\">=</span><span style=\"color:#359aff;\">true</span><span style=\"color:#b16565;\">;\r\n  </span><span style=\"color:#359aff;\">return</span><span style=\"color:#b16565;\">; </span><span style=\"color:#b16565;\">&#125;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.addLecture</span><span style=\"color:#b16565;\">(&#123; </span><span style=\"color:#ffffff;\">name</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> building</span><span style=\"color:#b16565;\">, </span><span style=\"color:#ffffff;\">floor</span><span style=\"color:#b16565;\">, \r\n    room</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> day</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> time</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> department</span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> as Lecture</span><span style=\"color:#b16565;\">)\r\n</span><span style=\"color:#ffffff;\">  .subscribe</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture </span><span style=\"color:#008000;\">=&gt; </span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures.</span><span style=\"color:#ff8000;\">push</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#b16565;\">);\r\n    </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.goBack</span><span style=\"color:#b16565;\">();\r\n  </span><span style=\"color:#b16565;\">&#125;);\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>We will get name, room and the other values from the form we have in the HTML. We will combine minutes and hours\r\n    to a time object, because <code style=\"font-family:'Consolas';\">Lecture</code> expects a <code\r\n      style=\"font-family:'Consolas';\">Time</code> object. With the if statement we check\r\n    if one of them has no value. This can happen if the user didn't type a name for example. therefore we need this\r\n    <code style=\"font-family:'Consolas';\">Boolean</code>. We are going to ask in the HTML later if it's true or false\r\n    and print a message to complete the\r\n    form. But first we need to initialise it in <b>lecture-add.component.ts</b>.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">fieldsEmpty</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff4848;\">Boolean </span><span style=\"color:#008000;\">= </span><span style=\"color:#359aff;\">false</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n  <p>The rest of the function you should already recognize. We use the function from the service and subscribe it. With\r\n    <code style=\"font-family:'Consolas';\">push</code> we add it to the array.</p>\r\n  <p>Last step is to complete the <b>lecture-add.component.html</b>.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;button </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui primary button&quot; (click)</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;add(\r\n  lectureName.value,\r\n  lectureBuilding.value,\r\n  lectureFloor.value,\r\n  lectureRoom.value,\r\n  lectureDay.value,\r\n  lectureHours.value,\r\n  lectureMinutes.value,\r\n  lectureDepartment.value)&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Add\r\n</span><span style=\"color:#359aff;\">&lt;/button&gt;\r\n&lt;p </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;color:red&quot; *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;fieldsEmpty</span><span style=\"color:#ff4848;\">==</span><span style=\"color:#ffffff;\">true&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Please check \r\n  again, if you filled all input fields correctly!</span><span style=\"color:#359aff;\">&lt;/p&gt;\r\n</span><span style=\"color:#359aff;\">&lt;button </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui button&quot; (click)</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;goBack()&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Go Back</span><span style=\"color:#359aff;\">&lt;/button&gt;</span></pre>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Delete Lectures</h4>\r\n  <p>Same procedure again. Prepare a function in <b>lecture-service.ts</b>.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">deleteLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#008000;\">| </span><span style=\"color:#ff8000;\">number </span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;Lecture&gt; </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">const </span><span style=\"color:#ff8000;\">id </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">typeof</span><span style=\"color:#ffffff;\"> lecture </span><span style=\"color:#008000;\">=== </span><span style=\"color:#ffff80;\">&#39;number&#39; </span><span style=\"color:#008000;\">?</span><span style=\"color:#ffffff;\"> lecture </span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> lecture.</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#b16565;\">;\r\n  </span><span style=\"color:#359aff;\">const</span><span style=\"color:#ffffff;\"> url </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> `$</span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureUrl</span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#008000;\">/$</span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\">`</span><span style=\"color:#b16565;\">;\r\n  </span><span style=\"color:#359aff;\">return </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.http.</span><span style=\"color:#359aff;\">delete</span><span style=\"color:#ffffff;\">&lt;Lecture&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">url</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> httpOptions</span><span style=\"color:#b16565;\">)\r\n  </span><span style=\"color:#ffffff;\">  .pipe</span><span style=\"color:#b16565;\">(\r\n  </span><span style=\"color:#ffffff;\">  catchError</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.handleError&lt;Lecture&gt;</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffff80;\">&#39;deleteLecture&#39;</span><span style=\"color:#b16565;\">))\r\n  </span><span style=\"color:#b16565;\">);\r\n&#125;</span></pre>\r\n\r\n  </div>\r\n  <p>Use it in <b>timetable.component.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">delete</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures </span><span style=\"color:#008000;\">= </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures.filter</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">l </span><span style=\"color:#008000;\">=&gt;</span><span style=\"color:#ffffff;\"> l </span><span style=\"color:#008000;\">!==</span><span style=\"color:#ffffff;\"> lecture</span><span style=\"color:#b16565;\">);\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.deleteLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#b16565;\">)</span><span style=\"color:#ffffff;\">.subscribe</span><span style=\"color:#b16565;\">();\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>And there should be a function to delete all lectures with one click:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">deleteAll</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">:</span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">for</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">let lecture of </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123;\r\n    </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.</span><span style=\"color:#359aff;\">delete</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture</span><span style=\"color:#b16565;\">);\r\n  </span><span style=\"color:#b16565;\">&#125;\r\n&#125;</span></pre>\r\n  </div>\r\n  <p>Since we provided the functions, we can add them to new buttons now. We just need to keep them in a\r\n    <code style=\"font-family:'Consolas';\">div</code>\r\n    to check if the <code style=\"font-family:'Consolas';\">lectures</code> already have data, otherwise we will have a\r\n    timing problem at this point.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;lectures&quot;</span><span style=\"color:#359aff;\">&gt;\r\n</span><span style=\"color:#359aff;\">  &lt;button </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui primary button&quot;\r\n  routerLink</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;/lecture-add&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Add Lecture</span><span style=\"color:#359aff;\">&lt;/button&gt;\r\n</span><span style=\"color:#359aff;\">  &lt;button </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui button&quot; (click)</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;deleteAll()&quot;\r\n  *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;lectures.length&gt;</span><span style=\"color:#00ff40;\">0</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Delete All</span><span style=\"color:#359aff;\">&lt;/button&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;lectures.length&gt;</span><span style=\"color:#00ff40;\">0</span><span style=\"color:#ffffff;\">&quot; </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;padding: </span><span style=\"color:#00ff40;\">15px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui middle aligned divided list&quot;</span><span style=\"color:#359aff;\">&gt;\r\n      </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngFor</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;let l of lectures&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;item&quot;</span><span style=\"color:#359aff;\">&gt;\r\n        </span><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;app-lecture-item item&quot; [lecture]</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;l&quot;\r\n          routerLink</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;/lecture-details/<span>{{</span>l.id<span>}}</span>&quot;\r\n        </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin: </span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\"> padding:</span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;&lt;/a&gt;\r\n</span><span style=\"color:#359aff;\">        &lt;button (click)</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;delete(l)&quot; </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui button&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Delete</span><span style=\"color:#359aff;\">&lt;/button&gt;\r\n      </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n\r\n  </span><span style=\"color:#359aff;\">&lt;div</span><span style=\"color:#ffffff;\"> *ngIf</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;lectures.length</span><span style=\"color:#ff4848;\">==</span><span style=\"color:#00ff40;\">0</span><span style=\"color:#ffffff;\">&quot; </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;padding: </span><span style=\"color:#00ff40;\">15px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;p&gt;</span><span style=\"color:#ffffff;\">No Items in the Timetable!</span><span style=\"color:#359aff;\">&lt;/p&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n&lt;/div&gt;</span></pre>\r\n  </div>\r\n  <p>Now that we have all functions which we wanted to edit the timetable, we are ready to finalize the application. </p>\r\n\r\n  <h4>Visualization of the Construction:</h4>\r\n  <p><img class=\"ui image big centered\" src=\"assets/img/App-Building-9.png\"></p>\r\n  <div class=\"ui success message\">\r\n    <h4>Summary</h4>\r\n    <ul>\r\n      <li>You learned about http, http-module and observables.</li>\r\n      <li>You added all dependencies to use HTTP.</li>\r\n      <li>You refactored the service to load data from a web API.</li>\r\n      <li>You configured the In-Memory Web API.</li>\r\n      <li>You learned about the methods <code style=\"font-family: 'Consolas';\">post()</code>, <code\r\n          style=\"font-family: 'Consolas';\">put()</code> and <code style=\"font-family: 'Consolas';\">delete()</code>\r\n        and applied them.</li>\r\n      <li>You added the functions add, edit, delete and delete all to the application.</li>\r\n    </ul>\r\n  </div>\r\n  <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\r\n    src=\"https://stackblitz.com/edit/where-to-go-step-7?embed=1&file=src/app/timetable/timetable.component.ts&hideNavigation=1\"></iframe>\r\n\r\n  <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\r\n    <h4>Your Progress:</h4>\r\n    <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"85\"></mat-progress-bar>\r\n  </div>\r\n\r\n</div>"

/***/ }),

/***/ "./src/app/http/http.component.ts":
/*!****************************************!*\
  !*** ./src/app/http/http.component.ts ***!
  \****************************************/
/*! exports provided: HttpComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpComponent", function() { return HttpComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var HttpComponent = /** @class */ (function () {
    function HttpComponent(service) {
        this.service = service;
    }
    HttpComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    HttpComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    HttpComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-http',
            template: __webpack_require__(/*! ./http.component.html */ "./src/app/http/http.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], HttpComponent);
    return HttpComponent;
}());



/***/ }),

/***/ "./src/app/project-overview/project-overview.component.html":
/*!******************************************************************!*\
  !*** ./src/app/project-overview/project-overview.component.html ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>Project Introduction and Overview</h2>\r\n<div>\r\n  <h4>What am I able to do after this Tutorial?</h4>\r\n  <p>Probably the most interesting question: What will I be able to program after working through this project?</p>\r\n  <ul>\r\n    <li>Create an application with many reusable components.</li>\r\n    <li>Show a list of items by using built-in Angular directives.</li>\r\n    <li>Use directives to show and hide items.</li>\r\n    <li>Create, read, update and delete items of a list.</li>\r\n    <li>Create forms.</li>\r\n    <li>Use one-way and two-way binding.</li>\r\n    <li>Bind methods to user events like button click.</li>\r\n    <li>Use routing to navigate through components and their views.</li>\r\n    <li>Format data by using pipes.</li>\r\n    <li>Use a service to manage the whole functionality.</li>\r\n  </ul>\r\n</div>\r\n<div>\r\n  <h4>What is this project about?</h4>\r\n  <p>Every student might know the problem. It's a new semester, you have a lot of lectures and\r\n    you never know which room to go next. Wouldn't it be nice to have an app that shows you where to go at first sight by\r\n    just opening it.</p>\r\n  <div class=\"ui info message\">\r\n    <h5>User Story</h5>\r\n    <p>As a <b>student </b><br />\r\n      I want to <b>have an app that shows me the room of my very next lecture</b>, <br />\r\n      to <b>see where to go next at first sight.</b></p>\r\n  </div>\r\n  <p>So this is basically the whole idea. On the first page we will display the next lecture of the day. We will also\r\n    have lecture data to manage. It will be possible to view all lectures in a timetable, to create new or update\r\n    existing\r\n    lectures, or\r\n    delete them.\r\n  </p>\r\n  <h4>Wireframes</h4>\r\n  <p>When you start the app you will see the next lecture you have to go to on the \"Home-Screen\". Above the Home-Screen\r\n    you can find the\r\n    navigation.</p>\r\n  <img style=\"margin-bottom:15px;\" class=\"ui centered large image\" src=\"assets/img/Home.png\">\r\n\r\n  <p>When you click on Timetable you will get to the list of lectures you have. Here you can see that every lecture can\r\n    be\r\n    deleted. You can also delete all lectures with one click. Furthermore you can click the \"Add\"-button to add a new\r\n    lecture. With a click on one lecture you will get to the details of this specific lecture and you can change them.\r\n  </p>\r\n  <img style=\"margin-bottom:15px;\" class=\"ui centered large image\" src=\"assets/img/Timetable.png\">\r\n\r\n  <p>So here you can change some details and save them. Then you go back to the Timetable and see the updated list of\r\n    lectures.</p>\r\n  <img style=\"margin-bottom:15px;\" class=\"ui centered large image\" src=\"assets/img/Details.png\">\r\n\r\n  <p>The last point in the menu is \"Add\". From there, or with the \"Add\"-button on the timetable-view you can get to the\r\n    add-view.\r\n    There you can add a totally new lecture by making some input and choosing options from the drop-downs.</p>\r\n  <img style=\"margin-bottom:15px;\" class=\"ui centered large image\" src=\"assets/img/Add.png\">\r\n\r\n</div>\r\n<br />\r\n<h2>How this Web-App works</h2>\r\n<p>You will learn about the basic concepts of Angular. For every concept like components, routing, service and so on,\r\n  you will have an own chapter with theoretical parts (light-grey background) and practical parts (instructions on white background). \r\n  Every chapter will bring you closer to the app I introduced to you. At the beginning of every chapter you will find a user story (light-blue background) about what you want to achieve and\r\n  at the end of every chapter you will find the list of things you've learned (light-green background), the visualization of the components and how\r\n  they are arranged, the current code and how it looks.</p>\r\n\r\n  <div class=\"ui four column grid\">\r\n    <div class=\"column\">\r\n      <div class=\"ui fluid image\">\r\n        <div class=\"ui black ribbon label\">\r\n          Theory\r\n        </div>\r\n        <img src=\"assets/img/Text-Theory.png\">\r\n      </div>\r\n    </div>\r\n    <div class=\"column\">\r\n      <div class=\"ui fluid image\">\r\n        <div class=\"ui black ribbon label\">\r\n          Instructions\r\n        </div>\r\n        <img src=\"assets/img/Text-Instructions.png\">\r\n      </div>\r\n    </div>\r\n    <div class=\"column\">\r\n      <div class=\"ui fluid image\">\r\n        <div class=\"ui black ribbon label\">\r\n          User Story\r\n        </div>\r\n        <img src=\"assets/img/Text-User-Story.png\">\r\n      </div>\r\n    </div>\r\n    <div class=\"column\">\r\n      <div class=\"ui fluid image\">\r\n        <div class=\"ui black ribbon label\">\r\n          Summary\r\n        </div>\r\n        <img src=\"assets/img/Text-Summary.png\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <p>The current code is displayed in an embedded code editor named \"Stackblitz\".\r\n    At the end of every chapter you can read the code of the whole project.</p>\r\n  <ol>\r\n    <li>With \"open in a new tab\" you can open the Stackblitz editor in a new tab.</li>\r\n    <li>This is the tab card of the currently opened class or file in the editor.</li>\r\n    <li>With a click on this icon you get the file structure of the project and you can open all other files in the embedded editor.</li>\r\n    <li>You can switch the displayed content in the embedded code editor. You can display editor and preview side by side or only the editor or only the preview.</li>\r\n    <li>You can search in the whole project. You will get a search bar when clicking on the magnifier icon.</li>\r\n  </ol>\r\n    <img style=\"margin-bottom:15px; width: 80%;\" class=\"ui centered image\" src=\"assets/img/Stackblitz.png\">\r\n    <p style=\"margin-bottom: 50px;\">Let me summarize: you can use the embedded editor like every code editor you know. It is based on Visual Studio Code. You can make changes\r\n      and you will see the results immediately or you can just look through the code. None of your changes are permanent, so play with the code as you like.\r\n    </p>\r\n\r\n<div style=\"margin-top: 20px;\">\r\n  <h4>Here you see the finished application and you can try it:</h4>\r\n  <iframe style=\"width:100%; height: 750px;\"\r\n    src=\"https://stackblitz.com/edit/where-to-go-step-8?embed=1&file=src/app/app.component.ts&hideExplorer=1&hideNavigation=1&view=preview\"></iframe>\r\n</div>"

/***/ }),

/***/ "./src/app/project-overview/project-overview.component.ts":
/*!****************************************************************!*\
  !*** ./src/app/project-overview/project-overview.component.ts ***!
  \****************************************************************/
/*! exports provided: ProjectOverviewComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProjectOverviewComponent", function() { return ProjectOverviewComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ProjectOverviewComponent = /** @class */ (function () {
    function ProjectOverviewComponent(service) {
        this.service = service;
    }
    ProjectOverviewComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    ProjectOverviewComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    ProjectOverviewComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-project-overview',
            template: __webpack_require__(/*! ./project-overview.component.html */ "./src/app/project-overview/project-overview.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], ProjectOverviewComponent);
    return ProjectOverviewComponent;
}());



/***/ }),

/***/ "./src/app/reusable-components/reusable-components.component.html":
/*!************************************************************************!*\
  !*** ./src/app/reusable-components/reusable-components.component.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>Reusable Components</h2>\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\n  <h5>User Story</h5>\n  <p>As a <b>programer</b><br />\n    I want to <b>have the details view seperated from the list</b>, <br />\n    to <b> make it reusable</b>.</p>\n</div>\n<div *ngIf=\"praxis\">\n  <h4>Generate Details Component</h4>\n  <p>The lecture details should be reusable, that's why they will have an extra component from now on. Just cut out the\n    HTML code about the details from <b>timetable.component.html</b>. It is the whole ui form. Generate the component\n    and paste it in <b>lecture-details.component.html</b>.</p>\n  <p class=\"ui message black\"> <code style=\"font-family:'Consolas';\">ng g component lecture-details</code></p>\n  <p>If we want to use the details component not only for a selected item but also for every lecture item, we need to\n    change <code style=\"font-family:'Consolas';\">selectedLecture</code> to <code\n      style=\"font-family:'Consolas';\">lecture</code> again.</p>\n\n  <p>The lecture property in <b>lecture-details.component.ts</b> must be an input property which is commented on by\n    the\n    <code style=\"font-family:'Consolas';\">@Input()</code>-decorator, as it binds the external <code\n      style=\"font-family:'Consolas';\">LectureItemComponent</code> to it.</p>\n      <p>Insert this right above the empty constructor:</p>\n  <div class=\"ui message black\">\n    <pre\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">@Input() lecture: Lecture</span><span style=\"color:#ff8000;\">;</span></pre>\n  </div>\n  <p>This results in making these imports:</p>\n\n  <div class=\"ui message black\">\n    <pre\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#ffffff;\">import &#123; Component, OnInit, Input &#125; from &#39;@angular/core&#39;</span><span style=\"color:#ff8000;\">;\n</span><span style=\"color:#ffffff;\">import &#123; Lecture &#125; from &#39;../shared/lecture&#39;</span><span style=\"color:#ff8000;\">;</span></pre>\n  </div>\n  <p>And put this in the <b>timetable.component.hmtl</b>:</p>\n\n  <div class=\"ui message black\">\n    <pre\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff; \"><span style=\"color:#359aff;\">&lt;app-lecture-details</span><span> [lecture]</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;selectedLecture&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#359aff;\">&lt;/app-lecture-details&gt; </span></pre>\n  </div>\n</div>\n\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\n  <p>If you have components that have a main and a detail view, you should seperate them for better maintenance. In this\n    expamle with the list of lectures, the component receives a lecture object through its lecture property and\n    indicates it. Now every time the user selects a lecture from the list, it will be displayed in the details\n    component.</p>\n  <p>With the selector <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">app-lecture-details</code>\n    the component can be displayed.</p>\n  <p><code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">[lecture]=\"selectedLecture\"</code> creates a\n    one-way-binding from the <code style=\"font-family:'Consolas';\"\n      style=\"font-family:'Consolas';\">selectedLecture</code> property\n    of the <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">TimetableComponent</code> to the <code\n      style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">lecture</code> property of the target element,\n    which is\n    assigned to the <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">lecture</code> property of the\n    <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">LectureDetailsComponent</code>.</p>\n  <p>If the user clicks on an item of that list, the <code style=\"font-family:'Consolas';\"\n      style=\"font-family:'Consolas';\">selectedLecture</code> changes. This updates the\n    <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">lecture</code>\n    because of the property-binding and the <code style=\"font-family:'Consolas';\"\n      style=\"font-family:'Consolas';\">LectureDetailsComponent</code> displayes the chosen object.</p>\n  <p>In this section we only made \"inside changes\". That means that you can't see any difference in the user interface.\n    We\n    seperated the list and the details-view. Now a development of both components is possible, without any need to\n    change the other one. The details-component is now reusable.</p>\n</div>\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\n  <h4>Visualization of the Construction:</h4>\n  <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-6.png\"></p>\n  <div class=\"ui success message\">\n    <h4>Summary</h4>\n    <ul>\n      <li>You generated a reusable, seperate component for the details-view.</li>\n      <li>You used the <code style=\"font-family:'Consolas';\">@Input</code>-decorator to make the property available for\n        the property binding.</li>\n      <li>You made the property binding for the selected lecture.</li>\n    </ul>\n  </div>\n  <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\n    src=\"https://stackblitz.com/edit/where-to-go-step-4?embed=1&file=src/app/lecture-details/lecture-details.component.html&hideNavigation=1\"></iframe>\n\n  <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\n    <h4>Your Progress:</h4>\n    <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"40\"></mat-progress-bar>\n  </div>\n\n</div>"

/***/ }),

/***/ "./src/app/reusable-components/reusable-components.component.ts":
/*!**********************************************************************!*\
  !*** ./src/app/reusable-components/reusable-components.component.ts ***!
  \**********************************************************************/
/*! exports provided: ReusableComponentsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReusableComponentsComponent", function() { return ReusableComponentsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ReusableComponentsComponent = /** @class */ (function () {
    function ReusableComponentsComponent(service) {
        this.service = service;
    }
    ReusableComponentsComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    ReusableComponentsComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    ReusableComponentsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-reusable-components',
            template: __webpack_require__(/*! ./reusable-components.component.html */ "./src/app/reusable-components/reusable-components.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], ReusableComponentsComponent);
    return ReusableComponentsComponent;
}());



/***/ }),

/***/ "./src/app/routing/routing.component.html":
/*!************************************************!*\
  !*** ./src/app/routing/routing.component.html ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>Routing</h2>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\r\n  <h5>User Story</h5>\r\n  <p>As a <b>user</b><br />\r\n    I want to <b>navigate through the views</b>, <br />\r\n    to <b> have the start page and the timetable accessable via navigation bar and the details via click on a lecture in the timetable</b>.</p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-bottom: 20px;\" class=\"ui message\">\r\n  <h4>What is Routing?</h4>\r\n  <p>Angular provides something called <code style=\"font-family:'Consolas';\">Router</code> for the navigation from one\r\n    view to another. The\r\n    <code style=\"font-family:'Consolas';\">Router</code> is loading different parts of the application. All views are\r\n    available for the user via URLs.\r\n    We will use clickable links for the navigation. These could be navigation items or list items. Angular is for\r\n    developing Single-Page-Applications. That means that the application is just one single HTML page and the content is\r\n    loaded asynchronously. The loading is usually no \"hard\" reloading. Things like linking the components or going forward\r\n    and backwards are challenging now, but HTML5 History API brings the technical basic for this. It's possible to\r\n    change the browser history via JavaScript without reloading the web page. It looks like a normal web page but it's\r\n    a single page. The <code style=\"font-family:'Consolas';\">Router</code> interacts with this HTML5 History API and\r\n    uses URLs to identify the\r\n    individual states. You will need three steps to get there:<br />\r\n  </p>\r\n  <ul>\r\n    <li>Assign an URL to a component.</li>\r\n    <li>Import the Routing-Module into the application.</li>\r\n    <li>Set where the components should be loaded into the template.</li>\r\n  </ul>\r\n</div>\r\n\r\n<h4>Routing Module</h4>\r\n<div *ngIf=\"praxis\">\r\n  <p>If we don't want to arrange the components one below the other, we need a navigation logic to route between\r\n    components. If you answered the question about routing during the creation of the project with (Y),\r\n    you will already have the file <b>app-routing.module.ts</b> in your project folder. If not, generate it now:</p>\r\n  <p class=\"ui message black\"> <code\r\n      style=\"font-family:'Consolas';\">ng generate module app-routing --flat --module=app</code></p>\r\n</div>\r\n\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>Routes tell the router which view to display when the user clicks on a link or inserts an URL in the address bar of\r\n    the browser.\r\n    A typical Angular route has two properties:\r\n  </p>\r\n  <ul>\r\n    <li><code style=\"font-family:'Consolas';\">path</code>: a string, that matches with the URL in the address bar of the\r\n      browser</li>\r\n    <li><code style=\"font-family:'Consolas';\">component</code>: the component that the router should create when\r\n      navigating to this route</li>\r\n  </ul>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>First we want to have a default route. When the browser is reloading, this route is displayed by default. So we\r\n    are going to type this into the <b>app-routing.module.ts</b> into <code\r\n      style=\"font-family:'Consolas';\">const routes: Routes = []</code>:</p>\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#ff00ff;\">path</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;&#39;</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> redirectTo</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;/where-to-go&#39;</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> pathMatch</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;full&#39; </span><span style=\"color:#b16565;\">&#125;</span>,</pre>\r\n  </div>\r\n  <p>Also insert the other needed routes at the same location:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#ff00ff;\">path</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;timetable&#39;</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> component</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> TimetableComponent </span><span style=\"color:#b16565;\">&#125;<span style=\"color:#ffffff;\">,</span>\r\n&#123; </span><span style=\"color:#ff00ff;\">path</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;where-to-go&#39;</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> component</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> WhereToGoComponent </span><span style=\"color:#b16565;\">&#125;</span></pre>\r\n  </div>\r\n\r\n  <p>For that, we need to import <code style=\"font-family:'Consolas';\">TimetableComponent</code> and <code\r\n      style=\"font-family:'Consolas';\">WhereToGoComponent</code> now.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> TimetableComponent </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;./timetable/timetable.component&#39;</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> WhereToGoComponent </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;./where-to-go/where-to-go.component&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Create a Navigation</h4>\r\n  <p>Next we can delete the <code style=\"font-family:'Consolas';\">&lt;app-where-to-go&gt;</code> and <code\r\n      style=\"font-family:'Consolas';\">&lt;app-timetable&gt;</code> from the\r\n    <b>app.component.html</b>\r\n    and just leave the title and the <code style=\"font-family:'Consolas';\">&lt;router-outlet&gt;</code>. These\r\n    components will only be parts of the route\r\n    now.</p>\r\n  <p>The <code style=\"font-family:'Consolas';\">&lt;router-outlet&gt;</code> indicates that the routed views are\r\n    displayed here.</p>\r\n  <p>Now we want to create the navigation. Right now we have the start page ('where-to-go') and the timetable. We tell\r\n    the router with the <code style=\"font-family:'Consolas';\">routerLink</code> which component to show and with the\r\n    directive\r\n    <code style=\"font-family:'Consolas';\">routerLinkActive</code>\r\n    the active item in the navigation will be highlighted. Our code in the <b>app.component.html</b> should look like\r\n    this:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;text-align:center&quot;</span><span style=\"color:#359aff;\">&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;h1 </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui header&quot; </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin: </span><span style=\"color:#00ff40;\">30px</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt;\r\n</span><span style=\"color:#ffffff;\">    Welcome to <span>{{</span> title <span>}}</span>!\r\n  </span><span style=\"color:#359aff;\">&lt;/h1&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;div </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui two item menu&quot;</span><span style=\"color:#359aff;\">&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;item&quot; routerLink</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;/where-to-go&quot;\r\n      routerLinkActive</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;active&quot;</span><span style=\"color:#359aff;\">&gt;\r\n</span><span style=\"color:#ffffff;\">      Home\r\n    </span><span style=\"color:#359aff;\">&lt;/a&gt;\r\n    </span><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;item&quot; routerLink</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;/timetable&quot;\r\n      routerLinkActive</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;active&quot;</span><span style=\"color:#359aff;\">&gt;\r\n</span><span style=\"color:#ffffff;\">      Timetable\r\n    </span><span style=\"color:#359aff;\">&lt;/a&gt;\r\n  </span><span style=\"color:#359aff;\">&lt;/div&gt;\r\n</span><span style=\"color:#359aff;\">  &lt;router-outlet&gt;&lt;/router-outlet&gt;\r\n</span><span style=\"color:#359aff;\">&lt;/div&gt;</span></pre>\r\n\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Visualization of the Construction:</h4>\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-7.png\"></p>\r\n</div>\r\n<h4>Details in own View</h4>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n\r\n  <p>The lecture details should be in an own view now, not beneath the timetable. Delete\r\n    <code\r\n      style=\"font-family:'Consolas';\">&lt;app-lecture-details [lecture]=\"selectedLecture\"&gt;&lt;/app-lecture-details&gt;</code>\r\n    from the <b>timetable.component.html</b>. We need an own route for them in the <b>app-routing.module.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"> <span style=\"color:#b16565;\">&#123; </span><span style=\"color:#ff00ff;\">path</span><span style=\"color:#008000;\">: </span><span style=\"color:#ffff80;\">&#39;lecture-details/:id&#39;</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> component</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> LectureDetailsComponent </span><span style=\"color:#b16565;\">&#125;</span></pre>\r\n  </div>\r\n\r\n  <p>For that, we need to import <code style=\"font-family:'Consolas';\">LectureDetailsComponent</code> now.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LectureDetailsComponent </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;./lecture-details/lecture-details.component&#39;</span><span style=\"color:#b16565;\">;\r\n</span></pre>\r\n  </div>\r\n\r\n  <p>And in the <b>timetable.component.html</b> where we iterate with a for-loop through the lectures we insert the\r\n    routerlink for the lecture details with the id of the clicked one:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;a </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;app-lecture-item item&quot; [lecture]</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;l&quot; routerLink</span><span style=\"color:#ff4848;\">=\r\n  </span><span style=\"color:#ffffff;\">  &quot;/lecture-details/<span>{{</span> l.id <span>}}</span>&quot; </span><span style=\"color:#ff4848;\">style=</span><span style=\"color:#ffffff;\">&quot;margin: </span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ff8000;\">;</span><span style=\"color:#ffffff;\"> padding:</span><span style=\"color:#00ff40;\">10px</span><span style=\"color:#ffffff;\">&quot;</span><span style=\"color:#359aff;\">&gt; </span><span style=\"color:#359aff;\">&lt;/a&gt;</span></pre>\r\n  </div>\r\n  <p>When you click on the first lecture you will see this in the address bar of your browser:\r\n    <img style=\"margin-bottom:15px;\" class=\"ui centered medium image\" src=\"assets/img/Browser-Navigates-To-Id.png\">\r\n    But you won't see the details view. First we need to change some things. Delete <code\r\n      style=\"font-family:'Consolas';\">selectedLecture</code> and\r\n    the <code style=\"font-family:'Consolas';\">onSelect()</code> method from the <b>timetable.component.ts</b>. Because\r\n    of the routing you won't need\r\n    it anymore.\r\n  </p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>Before that, the parent <code style=\"font-family:'Consolas';\">LectureItemComponent</code> property (<code\r\n      style=\"font-family:'Consolas';\">lecture</code>) sets the\r\n    <code style=\"font-family:'Consolas';\">LectureDetailsComponent</code>\r\n    property (<code style=\"font-family:'Consolas';\">lecture</code>), and the <code\r\n      style=\"font-family:'Consolas';\">LectureDetailsComponent</code> component displays the lecture. Now\r\n    the router creates the <code style=\"font-family:'Consolas';\">LectureDetailsComponent</code> as a response to an URL\r\n    like /lecture-detail/1.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>In <b>lecture-details.component.ts</b> we need to import the following and insert it as parameters in the\r\n    constructor:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> ActivatedRoute </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/router&#39;</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LectureService </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture.service&#39;</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Location </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;@angular/common&#39;</span><span style=\"color:#b16565;\">; </span></pre>\r\n  </div>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ff8000;\">constructor</span><span style=\"color:#b16565;\">(\r\n  </span><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> route</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> ActivatedRoute</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> lectureService</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> LectureService</span><span style=\"color:#b16565;\">,\r\n  </span><span style=\"color:#359aff;\">private </span><span style=\"color:#ff8000;\">location</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Location\r\n</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#b16565;\">&#125; </span></pre>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>You will need the following things to pick a lecture by its id.</p>\r\n  <p>The <code style=\"font-family:'Consolas';\">ActivatedRoute</code> contains information about the route to this\r\n    instance of the\r\n    <code style=\"font-family:'Consolas';\">LectureDetailsComponent</code>.\r\n    This component is interested in the route's bag of parameters extracted from the URL. The\r\n    <code style=\"font-family:'Consolas';\">LectureService</code>\r\n    gets the lecture data from the server and here it's used to display the lecture view. The <code\r\n      style=\"font-family:'Consolas';\">Location</code> is\r\n    an Angular service to interact with the browser. We are going to use this for a function to go back to the last\r\n    location.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>In the <b>lecture-datails.component.ts</b> we want to have a method that gets us one lecture by its ID and since\r\n    we use a service class we need to define the method in <b>lecture.service.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number</span><span style=\"color:#b16565;\">)</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;Lecture&gt;</span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return</span><span style=\"color:#ffffff;\"> of</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">LECTURES.</span><span style=\"color:#ff8000;\">find</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture </span><span style=\"color:#008000;\">=&gt;</span><span style=\"color:#ffffff;\"> lecture.</span><span style=\"color:#ff8000;\">id </span><span style=\"color:#008000;\">=== </span><span style=\"color:#ff8000;\">id</span><span style=\"color:#b16565;\">));\r\n&#125; </span></pre>\r\n\r\n  </div>\r\n  <p>Now we can use it in <b>lecture-datails.component.ts</b> like this:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLecture</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">const </span><span style=\"color:#ff8000;\">id </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">+</span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.route.snapshot.paramMap.</span><span style=\"color:#ff8000;\">get</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffff80;\">&#39;id&#39;</span><span style=\"color:#b16565;\">);\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.getLecture</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ff8000;\">id</span><span style=\"color:#b16565;\">)\r\n</span><span style=\"color:#ffffff;\">   .subscribe</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lecture </span><span style=\"color:#008000;\">=&gt; </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lecture </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> lecture</span><span style=\"color:#b16565;\">);\r\n&#125; </span></pre>\r\n  </div>\r\n\r\n\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p><code style=\"font-family:'Consolas';\">route.snapshot</code> is a static image of the route information, taken shortly\r\n    after the component was created.\r\n    <code style=\"font-family:'Consolas';\">paramMap</code> is a dictionary of route parameter values extracted from the\r\n    URL. The <code style=\"font-family:'Consolas';\">id</code> key\r\n    returns the id of the lecture to fetch. As route parameters are strings the + JavaScript-operator converts them to\r\n    a number, because the lecture id is one.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>In the next step we just need to add<code style=\"font-family:'Consolas';\"> void </code>as return parameter of the\r\n    lifecycle-hook\r\n    <code style=\"font-family:'Consolas';\">ngOnInit()</code>\r\n    in <b>lecture-details.component.ts</b> and call the <code style=\"font-family:'Consolas';\">getLecture()</code>\r\n    method:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">ngOnInit</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.getLecture</span><span style=\"color:#b16565;\">();\r\n&#125;</span></pre>\r\n  </div>\r\n  <h4>Go Back Button</h4>\r\n  <p>As already planned, in addition to the navigation we want to have a button that brings us back to the component we\r\n    visited before. That's what we needed the <code style=\"font-family:'Consolas';\">location</code> for. Add to\r\n    <b>lecture-details.component.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">goBack</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.</span><span style=\"color:#ff8000;\">location</span><span style=\"color:#ffffff;\">.</span><span style=\"color:#ff8000;\">back</span><span style=\"color:#b16565;\">();\r\n&#125;</span></pre>\r\n\r\n  </div>\r\n  <p>Last step is to add a button for this and bind it to the method in <b>lecture-details.component.html</b>.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">&lt;button </span><span style=\"color:#ff4848;\">class=</span><span style=\"color:#ffffff;\">&quot;ui button&quot; (click)</span><span style=\"color:#ff4848;\">=</span><span style=\"color:#ffffff;\">&quot;goBack()&quot;</span><span style=\"color:#359aff;\">&gt;</span><span style=\"color:#ffffff;\">Go Back</span><span style=\"color:#359aff;\">&lt;/button&gt; </span></pre>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Visualization of the Construction:</h4>\r\n  <p><img class=\"ui image big centered\" src=\"assets/img/App-Building-8.png\"></p>\r\n  <div class=\"ui success message\">\r\n    <h4>Summary</h4>\r\n    <ul>\r\n      <li>You learned about routing.</li>\r\n      <li>You added the Angular router to make a proper navigation.</li>\r\n      <li>You added a navigation to the <code style=\"font-family: 'Consolas';\">AppComponent</code>.</li>\r\n      <li>You defined paths, a default path and paths including parameters like the lecture id.</li>\r\n      <li>The details component got its own view.</li>\r\n      <li>You added there a go back function and button to go back to the last location in the browser history.</li>\r\n    </ul>\r\n  </div>\r\n  <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\r\n    src=\"https://stackblitz.com/edit/where-to-go-step-6?embed=1&file=src/app/lecture-details/lecture-details.component.ts&hideNavigation=1\"></iframe>\r\n\r\n    <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\r\n      <h4>Your Progress:</h4>\r\n      <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"65\"></mat-progress-bar>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/routing/routing.component.ts":
/*!**********************************************!*\
  !*** ./src/app/routing/routing.component.ts ***!
  \**********************************************/
/*! exports provided: RoutingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoutingComponent", function() { return RoutingComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var RoutingComponent = /** @class */ (function () {
    function RoutingComponent(service) {
        this.service = service;
    }
    RoutingComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    RoutingComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    RoutingComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-routing',
            template: __webpack_require__(/*! ./routing.component.html */ "./src/app/routing/routing.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], RoutingComponent);
    return RoutingComponent;
}());



/***/ }),

/***/ "./src/app/services/services.component.html":
/*!**************************************************!*\
  !*** ./src/app/services/services.component.html ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>Services</h2>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\" class=\"ui info message\">\r\n  <h5>User Story</h5>\r\n  <p>As a <b>programer</b><br />\r\n    I want to <b>use a service</b>, <br />\r\n    to <b> not manage my data in the components anymore</b>.</p>\r\n</div>\r\n<div *ngIf=\"theoryLarge\" style=\"margin-bottom: 20px;\" class=\"ui message\">\r\n  <h4>What is a Service?</h4>\r\n  <p>Every good application should have its logic in a service not in the components. A service is one of the main\r\n    concepts of Angular. If you are already experienced with object-orientated programing languages, you may know the\r\n    MVC model. The service is like the controller. A service is a function or class that provides the functionality for\r\n    other functions or classes. It has two main tasks:</p>\r\n  <ul>\r\n    <li>Encapsulation of the application logic</li>\r\n    <li>Save the data, that is needed by one or more components of the application</li>\r\n  </ul>\r\n  <p>The concept \"Inversion of Control (IoC)\" and the pattern \"Dependency Injection\" can help us. If you want to use a\r\n    class at any point in the application, you could initialise the class at this point. But this solution is confusing\r\n    and has high maintenance. For example if you change just little things in the constructor of the class, you might\r\n    have to make changes everywhere in your code. This can be avoided by giving the responsibility of generating\r\n    dependencies to a higher authority. You are not allowed to use the key word <code\r\n      style=\"font-family:'Consolas';\">new</code> to create a dependency.\r\n    You will get the dependencies from a higher authority instead. The responsibility of generating an object is\r\n    reversed. IoC can be realised with different patterns, Angular uses dependency injection.\r\n  </p>\r\n  <p>Angular uses constructor injection: <br />\r\n    <code style=\"font-family:'Consolas';\">constructor(myDependency: MyDependencyType) &#123; &#125;</code> <br />\r\n    To use a service like this we need to give it the decorator <code\r\n      style=\"font-family:'Consolas';\">@Injectable()</code>. Another possibility is to\r\n    register the service in the <code style=\"font-family:'Consolas';\">providers</code> array of the <code\r\n      style=\"font-family:'Consolas';\">AppModule</code>, but here we will use the\r\n    other way.\r\n  </p>\r\n</div>\r\n<h4>Generate a Service</h4>\r\n<div *ngIf=\"theorySmall\" style=\"margin-bottom: 20px;\" class=\"ui message\">\r\n\r\n  <p>At the moment all the data is saved in the components. That is not the way it should be. The job of a component is\r\n    to present data, however the direct data access is the job of a service.</p>\r\n  <p>In the next step we want to create a <code style=\"font-family:'Consolas';\">LectureService</code> that all other\r\n    classes in the application can\r\n    use to get\r\n    the data of the lectures. We use Angular's dependency injection to inject the service into the\r\n    <code style=\"font-family:'Consolas';\">LectureItemComponent</code>.\r\n  </p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p class=\"ui message black\"><code style=\"font-family:'Consolas';\">\r\n  ng g service shared/lecture\r\n</code></p>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>The service class uses the <code style=\"font-family:'Consolas';\">@Injectable()</code>-decorator and therefore\r\n    imports <code style=\"font-family:'Consolas';\">Injectable</code>. This\r\n    service class now provides an injectable service. The decorator accepts a metadata object for the service.</p>\r\n  <p>If you use a service for accessing the data, from now on you can change your implementation without touching the\r\n    components.</p>\r\n</div>\r\n\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>We are going to need this function in the class <b>LectureService</b> in <b>lecture.service.ts</b> to get the lecture data. For now we'll still use\r\n    the\r\n    mock-data.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#008000;\">[] </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return</span><span style=\"color:#ffffff;\"> LECTURES</span><span style=\"color:#b16565;\">;\r\n&#125;</span></pre>\r\n\r\n  </div>\r\n  <p>Your Visual Studio Code or you should import <code style=\"font-family:'Consolas';\">Lecture</code> and <code\r\n      style=\"font-family:'Consolas';\">LECTURES</code> now.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture&#39;</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LECTURES </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;./mock-lectures&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n  </div>\r\n</div>\r\n<h4>Inject the Service</h4>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>We are going to add a parameter of type <code style=\"font-family:'Consolas';\">LectureService</code> to the\r\n    constructor of the\r\n    <b>timetable.component.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ff8000;\">constructor</span><span style=\"color:#b16565;\">(</span><span style=\"color:#359aff;\">private</span><span style=\"color:#ffffff;\"> lectureService</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> LectureService</span><span style=\"color:#b16565;\">) </span><span style=\"color:#b16565;\">&#123; </span><span style=\"color:#b16565;\">&#125; </span></pre>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>This added parameter <code style=\"font-family:'Consolas';\">lectureService</code> also defines a property of the\r\n    service class as well as it\r\n    identifies it as an injection. With the dependency injection we set the parameter <code\r\n      style=\"font-family:'Consolas';\">lectureService</code> to the\r\n    singleton instance of the <code style=\"font-family:'Consolas';\">LectureService</code>. The singleton pattern is a\r\n    software design pattern which\r\n    ensures that exactly one object exists in a class.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p>Now replace the <code style=\"font-family:'Consolas';\">lecture</code> propterty in <b>timetable.component.ts</b> and\r\n    import the\r\n    <code style=\"font-family:'Consolas';\">LectureService</code>\r\n    if it wasn't imported automatically by adding the parameter in the constructor before.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> LectureService </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture.service&#39;</span><span style=\"color:#b16565;\">;\r\n</span><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Lecture </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;../shared/lecture&#39;</span><span style=\"color:#b16565;\">;</span></pre>\r\n\r\n  </div>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">lectures</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Lecture</span><span style=\"color:#008000;\">[]</span><span style=\"color:#b16565;\">; </span></pre>\r\n\r\n  </div>\r\n  <p>Next we are going to use the method of the service class to get the lectures into our <code\r\n      style=\"font-family:'Consolas';\">lecture</code> array.\r\n  </p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures </span><span style=\"color:#008000;\">= </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.getLectures</span><span style=\"color:#b16565;\">();\r\n&#125;</span></pre>\r\n\r\n  </div>\r\n  <p>In the lifecycle hook <code style=\"font-family:'Consolas';\">ngOnInit()</code> the method is called and executed\r\n    when loading the browser.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">ngOnInit</span><span style=\"color:#b16565;\">() </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.getLectures</span><span style=\"color:#b16565;\">();\r\n&#125; </span></pre>\r\n\r\n  </div>\r\n</div>\r\n<h4>Observable Data</h4>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p>The service method <code style=\"font-family:'Consolas';\">getLectures()</code> now has a synchronous signature which\r\n    means that the service can\r\n    fetch data synchronously. This is just working because we fetch mock-data right now. If we have a real app with\r\n    real data this won't work at all. Fetching data from a remote server is an asynchronous operation. In the \"real\"\r\n    world the service has to wait for the respond of the server and the method cannot return immediately.</p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <p><code style=\"font-family:'Consolas';\">LectureService.getLectures()</code> needs to have an asynchronous signature,\r\n    therefore we will return an\r\n    <code style=\"font-family:'Consolas';\">Observable</code>.\r\n    We need to import in <b>lecture.service.ts</b>:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre\r\n      style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#359aff;\">import </span><span style=\"color:#b16565;\">&#123;</span><span style=\"color:#ffffff;\"> Observable</span><span style=\"color:#b16565;\">,</span><span style=\"color:#ffffff;\"> of </span><span style=\"color:#b16565;\">&#125;</span><span style=\"color:#ffffff;\"> from </span><span style=\"color:#ffff80;\">&#39;rxjs&#39;</span><span style=\"color:#b16565;\">; </span></pre>\r\n  </div>\r\n  <p>And replace the method with this code:</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">:</span><span style=\"color:#ffffff;\"> Observable&lt;Lecture</span><span style=\"color:#008000;\">[]&gt; </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">return</span><span style=\"color:#ffffff;\"> of </span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">LECTURES</span><span style=\"color:#b16565;\">);\r\n&#125;</span></pre>\r\n\r\n  </div>\r\n  <p>We also need to replace the method in <b>timetable.component.ts</b> now.</p>\r\n\r\n  <div class=\"ui message black\">\r\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#ffffff;  \"><span style=\"color:#ffffff;\">getLectures</span><span style=\"color:#b16565;\">()</span><span style=\"color:#008000;\">: </span><span style=\"color:#359aff;\">void </span><span style=\"color:#b16565;\">&#123;\r\n  </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectureService.getLectures</span><span style=\"color:#b16565;\">()\r\n</span><span style=\"color:#ffffff;\">  .subscribe</span><span style=\"color:#b16565;\">(</span><span style=\"color:#ffffff;\">lectures </span><span style=\"color:#008000;\">=&gt; </span><span style=\"color:#359aff;\">this</span><span style=\"color:#ffffff;\">.lectures </span><span style=\"color:#008000;\">=</span><span style=\"color:#ffffff;\"> lectures</span><span style=\"color:#b16565;\">);\r\n&#125; </span></pre>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"theorySmall\" style=\"margin-top: 20px;\" class=\"ui message\">\r\n  <p><code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">Observable.subscribe()</code> makes a huge\r\n    difference. Before we had a synchronous assignment of the array\r\n    of lectures to the <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">lectures</code> property\r\n    and this assignment wanted back the data immediately. Now we wait\r\n    for the <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">Observable</code> to return the array\r\n    of lectures, even if this happens after only a view minutes. Then\r\n    <code style=\"font-family:'Consolas';\" style=\"font-family:'Consolas';\">subscribe()</code> passes the emitted array to\r\n    the callback, which sets the component's lecture property.\r\n    You will learn more about observable data in the chapter <a routerLink=\"/http\">HTTP</a>.\r\n  </p>\r\n</div>\r\n<div *ngIf=\"praxis\" style=\"margin-top: 20px;\">\r\n  <h4>Visualization of the Construction:</h4>\r\n  (No changes here)\r\n  <p><img class=\"ui image large centered\" src=\"assets/img/App-Building-6.png\"></p>\r\n\r\n  <div class=\"ui success message\">\r\n    <h4>Summary</h4>\r\n    <ul>\r\n      <li>You learned about services.</li>\r\n      <li>You generated a service and performed constructor injection.</li>\r\n      <li>You made the signature of the methods asynchronous.</li>\r\n    </ul>\r\n  </div>\r\n  <iframe style=\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\"\r\n    src=\"https://stackblitz.com/edit/where-to-go-step-5?embed=1&file=src/app/timetable/timetable.component.ts&hideNavigation=1\"></iframe>\r\n\r\n  <div class=\"ui center aligned segment\" style=\"width: 50%; margin: 0 auto\">\r\n    <h4>Your Progress:</h4>\r\n    <mat-progress-bar style=\"margin-bottom:20px;\" mode=\"determinate\" value=\"50\"></mat-progress-bar>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/services/services.component.ts":
/*!************************************************!*\
  !*** ./src/app/services/services.component.ts ***!
  \************************************************/
/*! exports provided: ServicesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServicesComponent", function() { return ServicesComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ServicesComponent = /** @class */ (function () {
    function ServicesComponent(service) {
        this.service = service;
    }
    ServicesComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    ServicesComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    ServicesComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-services',
            template: __webpack_require__(/*! ./services.component.html */ "./src/app/services/services.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], ServicesComponent);
    return ServicesComponent;
}());



/***/ }),

/***/ "./src/app/shared/modi.service.ts":
/*!****************************************!*\
  !*** ./src/app/shared/modi.service.ts ***!
  \****************************************/
/*! exports provided: ModiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModiService", function() { return ModiService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _modi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modi */ "./src/app/shared/modi.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var ModiService = /** @class */ (function () {
    function ModiService() {
        this.currentModus = { name: "default", theorySmall: true, theoryLarge: true, praxis: true };
    }
    ModiService.prototype.getModi = function () {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(_modi__WEBPACK_IMPORTED_MODULE_1__["MODI"]);
    };
    ModiService.prototype.getModus = function () {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(this.currentModus);
    };
    ModiService.prototype.setModus = function (modus) {
        this.currentModus = modus;
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(this.currentModus);
    };
    ModiService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], ModiService);
    return ModiService;
}());



/***/ }),

/***/ "./src/app/shared/modi.ts":
/*!********************************!*\
  !*** ./src/app/shared/modi.ts ***!
  \********************************/
/*! exports provided: MODI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MODI", function() { return MODI; });
var MODI = [
    {
        name: 'theorist',
        theorySmall: true,
        theoryLarge: true,
        praxis: false
    },
    {
        name: 'practitioner',
        theorySmall: false,
        theoryLarge: false,
        praxis: true
    },
    {
        name: 'both',
        theorySmall: true,
        theoryLarge: true,
        praxis: true
    }
];


/***/ }),

/***/ "./src/app/typescript/typescript.component.html":
/*!******************************************************!*\
  !*** ./src/app/typescript/typescript.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2>TypeScript Introduction:</h2>\n<div>\n    <p>TypeScript is an Open-Source-Project developed by Microsoft. It expands JavaScript, which means that you can write as much\n        JavaScript in your TypeScript document as you want.\n    </p>\n    <p>But it comes with a much stronger type system, as you may know from programing languages like Java and C#.</p>\n    <p>Bonus: TypeScript is runnable in every browser and platform as it compiles to pure JavaScript.</p>\n\n    <h4>1. Basic Types</h4>\n    <p>When you declare and initialise a variable, it's always the same:</p>\n\n    <div class=\"ui info message\">\n        <pre\n            style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#ff8000;\">name</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">type </span><span style=\"color:#008000;\">= </span><span style=\"color:#ff8000;\">value</span><span style=\"color:#804040;\">;</span></pre>\n    </div>\n    <h5>number</h5>\n\n    <div>\n        <pre\n            style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#000000;\">age</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number </span><span style=\"color:#008000;\">= </span><span style=\"color:#ff0000;\">5</span><span style=\"color:#804040;\">;</span></pre>\n    </div>\n    <h5>String</h5>\n    <div>\n        <pre\n            style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#000000;\">firstname</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String </span><span style=\"color:#008000;\">= </span><span style=\"color:#808080;\">&#39;Michaela&#39;</span><span style=\"color:#804040;\">;</span></pre>\n    </div>\n    <p>Template-String: Expressions embedded directly in the string.</p>\n    <div>\n        <pre\n            style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#000000;\">output</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String </span><span style=\"color:#008000;\">=</span><span style=\"color:#000000;\"> `</span><span style=\"color:#804040;\">&#123;</span><span style=\"color:#000000;\">firstname</span><span style=\"color:#804040;\">&#125; </span><span style=\"color:#008000;\">is </span><span style=\"color:#804040;\">&#123;</span><span style=\"color:#000000;\">age</span><span style=\"color:#804040;\">&#125;</span><span style=\"color:#000000;\"> years old.`</span><span style=\"color:#804040;\">;</span></pre>\n    </div>\n    <h5>var</h5>\n    <p>Variables with \"var\" are only valid in the function in which they were declared.</p>\n    <h5>let</h5>\n    <p>\"let\" is only for block-bound variables, which are solely valid for the specific control structure e.g. a for-loop &ndash; not for the whole function.</p>\n    <h5>const</h5>\n    <p>Once initialised you can't overwrite the value. They always have to be initialised.</p>\n\n    <h5>Getter and Setter</h5>\n    <p>\n        Known from object oriented programing. You can read or set the property of an object.\n    </p>\n    <h5>Boolean</h5>\n\n    <div>\n        <pre\n            style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#000000;\">let workingHard</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">Boolean </span><span style=\"color:#008000;\">=</span><span style=\"color:#000000;\"> ‚Äötrue‚Äò</span><span style=\"color:#804040;\">;</span></pre>\n    </div>\n    <h5>Arrays</h5>\n\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#000000;\">let fibonacci</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">Array</span><span style=\"color:#000000;\">&lt;number&gt; </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[</span><span style=\"color:#ff0000;\">0</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">1</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">1</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">2</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">3</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">5</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">8</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">13</span><span style=\"color:#008000;\">]</span><span style=\"color:#804040;\">;\n\n</span><span style=\"color:#000000;\">let fibonacci</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number</span><span style=\"color:#008000;\">[] </span><span style=\"color:#008000;\">=[</span><span style=\"color:#ff0000;\">0</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">1</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">1</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">2</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">3</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">5</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">8</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">13</span><span style=\"color:#008000;\">]</span><span style=\"color:#804040;\">;\n\n</span><span style=\"color:#000000;\">let differentValueTypes </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[ </span><span style=\"color:#ff0000;\">5</span><span style=\"color:#804040;\">, </span><span style=\"color:#804040;\">&#123;</span><span style=\"color:#000000;\"> firstname</span><span style=\"color:#008000;\">: </span><span style=\"color:#808080;\">&#39;Michaela&#39; </span><span style=\"color:#804040;\">&#125;, </span><span style=\"color:#0000ff;\">function</span><span style=\"color:#804040;\">() </span><span style=\"color:#804040;\">&#123; \n    console.warn</span><span style=\"color:#804040;\">(‚Äö</span><span style=\"color:#000000;\">Nothing inside.‚Äò</span><span style=\"color:#804040;\">) \n    </span><span style=\"color:#804040;\">&#125; </span><span style=\"color:#008000;\">]</span><span style=\"color:#804040;\">;</span></pre>\n    </div>\n    <h5>Spread-Operator</h5>\n\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#0000ff;\">var</span><span style=\"color:#000000;\"> arr1 </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[ </span><span style=\"color:#ff0000;\">1</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">2</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">5</span><span style=\"color:#008000;\">]</span><span style=\"color:#804040;\">;\n\n</span><span style=\"color:#0000ff;\">var</span><span style=\"color:#000000;\"> arr2 </span><span style=\"color:#008000;\">= </span><span style=\"color:#008000;\">[</span><span style=\"color:#000000;\"> ...arr1</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">7</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">8</span><span style=\"color:#804040;\">,</span><span style=\"color:#008000;\">]</span><span style=\"color:#804040;\">;</span></pre>       \n    </div>\n    <p>Numbers in arr2 are now:</p>\n    <pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#008000;\">[ </span><span style=\"color:#ff0000;\">1</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">2</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">5</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">7</span><span style=\"color:#804040;\">, </span><span style=\"color:#ff0000;\">8</span><span style=\"color:#008000;\">]</span></pre>\n    <h5>Any</h5>\n    <p> You can always use the fallback value \"any\" if you don't know which data type you will get back.</p>\n\n    <h4>2. Classes</h4>\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#0000ff;\">class</span><span style=\"color:#000000;\"> Animal </span><span style=\"color:#804040;\">&#123; </span><span style=\"color:#804040;\">&#125; </span></pre>\n    </div>\n    <h5>Properties</h5>\n    <p>Extend classes with further information. An animal could have name, age and owner.</p>\n\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#0000ff;\">class</span><span style=\"color:#000000;\"> Animal </span><span style=\"color:#804040;\">&#123;\n    </span><span style=\"color:#0000ff;\">public </span><span style=\"color:#ff8000;\">name</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#0000ff;\">public</span><span style=\"color:#000000;\"> age</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#0000ff;\">public</span><span style=\"color:#000000;\"> owner</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;\n&#125;</span></pre>              \n    </div>\n\n    <h5>Methods</h5>\n    <p>Extend classes with logic. In addition TypeScript allows to precise the signature of the methods with a\n        parameter type and a return type. </p>\n\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#0000ff;\">class</span><span style=\"color:#000000;\"> Animal </span><span style=\"color:#804040;\">&#123;\n    </span><span style=\"color:#0000ff;\">public </span><span style=\"color:#ff8000;\">name</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#0000ff;\">public</span><span style=\"color:#000000;\"> age</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#0000ff;\">public</span><span style=\"color:#000000;\"> owner</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#000000;\">  changeOwner</span><span style=\"color:#804040;\">(</span><span style=\"color:#000000;\">owner</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">)</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">&#123;\n        </span><span style=\"color:#0000ff;\">this</span><span style=\"color:#000000;\">.owner </span><span style=\"color:#008000;\">=</span><span style=\"color:#000000;\"> owner</span><span style=\"color:#804040;\">;\n        </span><span style=\"color:#0000ff;\">return </span><span style=\"color:#0000ff;\">this</span><span style=\"color:#000000;\">.owner</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#804040;\">&#125;\n&#125;</span></pre>\n                 \n    </div>\n    <p>If you use \"void\" as return type, the method has no return value.</p>\n    <h5>Constructors</h5>\n    <p>Constructors are methods which are called during the initialization of a class. Values that are\n        necessary later, can be transferred.</p>\n\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#ff8000;\">constructor</span><span style=\"color:#804040;\">( </span><span style=\"color:#ff8000;\">name</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;</span><span style=\"color:#000000;\"> age</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number</span><span style=\"color:#804040;\">;</span><span style=\"color:#000000;\"> owner</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;) </span><span style=\"color:#804040;\">&#123;\n    </span><span style=\"color:#0000ff;\">this</span><span style=\"color:#000000;\">.</span><span style=\"color:#ff8000;\">name </span><span style=\"color:#008000;\">= </span><span style=\"color:#ff8000;\">name</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#0000ff;\">this</span><span style=\"color:#000000;\">.age </span><span style=\"color:#008000;\">=</span><span style=\"color:#000000;\"> age</span><span style=\"color:#804040;\">;\n    </span><span style=\"color:#0000ff;\">this</span><span style=\"color:#000000;\">.owner </span><span style=\"color:#008000;\">=</span><span style=\"color:#000000;\"> owner</span><span style=\"color:#804040;\">;\n&#125;</span></pre>\n    </div>\n    <p>A difference to other programing languages: Only ONE constructor per class is possible!</p>\n\n    <h5>Inheritance</h5>\n    <p>Also known from object-oriented programing, with the keyword  <code style=\"font-family:'Consolas';\">extends</code>.</p>\n \n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#0000ff;\">class</span><span style=\"color:#000000;\"> Cat </span><span style=\"color:#0000ff;\">extends</span><span style=\"color:#000000;\"> Animal </span><span style=\"color:#804040;\">&#123; </span><span style=\"color:#804040;\">&#125; </span></pre>\n    </div>\n    <p>You can use the methods and constructors of the basis class with  \"<code style=\"font-family:'Consolas';\">super()</code>\". The methods can be\n        rewritten. If a derived class (Cat) is instantiated, you automatically get access to attributes and methods of\n        the parent classes (Animal). </p>\n\n    <h4>3. Interfaces</h4>\n    <p>Interfaces are used to define a public interface and hide the concrete implementation. It can be determined\n        which parts must be included and which types they should have.</p>\n    <p>Optional parameters have a  <code style=\"font-family:'Consolas';\">?</code> behind their name e.g.  <code style=\"font-family:'Consolas';\">public owner?: String;</code>.</p>\n  \n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#0000ff;\">interface</span><span style=\"color:#000000;\"> Contact </span><span style=\"color:#008000;\">= </span><span style=\"color:#804040;\">&#123;</span><span style=\"color:#000000;\"> firstname</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;</span><span style=\"color:#000000;\"> lastname</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff0000;\">String</span><span style=\"color:#804040;\">;</span><span style=\"color:#000000;\"> age</span><span style=\"color:#008000;\">?: </span><span style=\"color:#ff8000;\">number </span><span style=\"color:#008000;\">| </span><span style=\"color:#ff0000;\">String </span><span style=\"color:#804040;\">&#125;</span></pre>\n    </div>\n    <p>If the object gets an additional property or the value doesn't have the required type, you would get an error.\n    </p>\n\n    <h5>Indexable Interfaces</h5>\n    <p>Interfaces can also be defined by an indexable key. For instance the interface determines the type for all elements of an\n        array.</p>\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#0000ff;\">interface</span><span style=\"color:#000000;\"> StringArray </span><span style=\"color:#804040;\">&#123; </span><span style=\"color:#008000;\">[</span><span style=\"color:#ff8000;\">index</span><span style=\"color:#008000;\">: </span><span style=\"color:#ff8000;\">number</span><span style=\"color:#008000;\">]:</span><span style=\"color:#000000;\"> string</span><span style=\"color:#804040;\">; </span><span style=\"color:#804040;\">&#125;</span></pre>\n    </div>\n    <h5>Interfaces for Functions</h5>\n    <p>The key is the function signature. The value of the interface is the return value of the function.</p>\n\n    <h5>Interface for Classes</h5>\n    <p>The keyword to implement an Interface is  \"<code style=\"font-family:'Consolas';\">implements</code>\". The compiler will display what the\n        implementation of the interface requires. That means all defined properties and methods of the interface. Type\n        definitions are the same as in interfaces.</p>\n\n    <h4>4. Decorators</h4>\n\n    <div>\n<pre style=\"font-family:'Consolas'; font-size:10pt; color:#000000;  \"><span style=\"color:#000000;\">@Component</span><span style=\"color:#804040;\">(&#123;\n    </span><span style=\"color:#008080;\">// configuration object\n</span><span style=\"color:#804040;\">&#125;)\n</span><span style=\"color:#0000ff;\">class</span><span style=\"color:#000000;\"> myComponent </span><span style=\"color:#804040;\">&#123; </span><span style=\"color:#804040;\">&#125;</span></pre>              \n    </div>\n    <p>Metadata is added to the class. The Angular-Framework knows that the class must be handled as a component.</p>\n    <p>Expressions such as  \"<code style=\"font-family:'Consolas';\">@readonly</code>\" are not provided in Angular.</p>\n</div>\n\n<div class=\"ui message\" style=\"margin-top: 30px; margin-bottom: 30px;\">\n    <p>Now that you know all these things, you are ready for a bigger project. Feel free to come back any time, if you\n        want to look up something.</p>\n</div>"

/***/ }),

/***/ "./src/app/typescript/typescript.component.ts":
/*!****************************************************!*\
  !*** ./src/app/typescript/typescript.component.ts ***!
  \****************************************************/
/*! exports provided: TypescriptComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypescriptComponent", function() { return TypescriptComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_modi_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/modi.service */ "./src/app/shared/modi.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var TypescriptComponent = /** @class */ (function () {
    function TypescriptComponent(service) {
        this.service = service;
    }
    TypescriptComponent.prototype.ngOnInit = function () {
        this.getModus();
        this.theorySmall = this.modus.theorySmall;
        this.theoryLarge = this.modus.theoryLarge;
        this.praxis = this.modus.praxis;
    };
    TypescriptComponent.prototype.getModus = function () {
        var _this = this;
        this.service.getModus()
            .subscribe(function (modus) { return _this.modus = modus; });
    };
    TypescriptComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-typescript',
            template: __webpack_require__(/*! ./typescript.component.html */ "./src/app/typescript/typescript.component.html")
        }),
        __metadata("design:paramtypes", [_shared_modi_service__WEBPACK_IMPORTED_MODULE_1__["ModiService"]])
    ], TypescriptComponent);
    return TypescriptComponent;
}());



/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
var environment = {
    production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(function (err) { return console.error(err); });


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Users\mi12\Desktop\AngularTest\LernApp\Master-Project\src\main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map